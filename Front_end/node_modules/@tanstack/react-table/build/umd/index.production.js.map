{"version":3,"file":"index.production.js","sources":["../../../table-core/build/lib/index.mjs","../../src/index.tsx"],"sourcesContent":["/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n// Is this type a tuple?\n\n// If this type is a tuple, what indices are allowed?\n\n///\n\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction noop() {\n  //\n}\nfunction makeStateUpdater(key, instance) {\n  return updater => {\n    instance.setState(old => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, old[key])\n      };\n    });\n  };\n}\nfunction isFunction(d) {\n  return d instanceof Function;\n}\nfunction isNumberArray(d) {\n  return Array.isArray(d) && d.every(val => typeof val === 'number');\n}\nfunction flattenBy(arr, getChildren) {\n  const flat = [];\n  const recurse = subArr => {\n    subArr.forEach(item => {\n      flat.push(item);\n      const children = getChildren(item);\n      if (children != null && children.length) {\n        recurse(children);\n      }\n    });\n  };\n  recurse(arr);\n  return flat;\n}\nfunction memo(getDeps, fn, opts) {\n  let deps = [];\n  let result;\n  return () => {\n    let depTime;\n    if (opts.key && opts.debug) depTime = Date.now();\n    const newDeps = getDeps();\n    const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index) => deps[index] !== dep);\n    if (!depsChanged) {\n      return result;\n    }\n    deps = newDeps;\n    let resultTime;\n    if (opts.key && opts.debug) resultTime = Date.now();\n    result = fn(...newDeps);\n    opts == null || opts.onChange == null || opts.onChange(result);\n    if (opts.key && opts.debug) {\n      if (opts != null && opts.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n        const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n        const resultFpsPercentage = resultEndTime / 16;\n        const pad = (str, num) => {\n          str = String(str);\n          while (str.length < num) {\n            str = ' ' + str;\n          }\n          return str;\n        };\n        console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);\n      }\n    }\n    return result;\n  };\n}\n\nfunction createColumn(table, columnDef, depth, parent) {\n  var _ref, _resolvedColumnDef$id;\n  const defaultColumn = table._getDefaultColumnDef();\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef\n  };\n  const accessorKey = resolvedColumnDef.accessorKey;\n  let id = (_ref = (_resolvedColumnDef$id = resolvedColumnDef.id) != null ? _resolvedColumnDef$id : accessorKey ? accessorKey.replace('.', '_') : undefined) != null ? _ref : typeof resolvedColumnDef.header === 'string' ? resolvedColumnDef.header : undefined;\n  let accessorFn;\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn;\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = originalRow => {\n        let result = originalRow;\n        for (const key of accessorKey.split('.')) {\n          var _result;\n          result = (_result = result) == null ? void 0 : _result[key];\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(`\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`);\n          }\n        }\n        return result;\n      };\n    } else {\n      accessorFn = originalRow => originalRow[resolvedColumnDef.accessorKey];\n    }\n  }\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(resolvedColumnDef.accessorFn ? `Columns require an id when using an accessorFn` : `Columns require an id when using a non-string header`);\n    }\n    throw new Error();\n  }\n  let column = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent,\n    depth,\n    columnDef: resolvedColumnDef,\n    columns: [],\n    getFlatColumns: memo(() => [true], () => {\n      var _column$columns;\n      return [column, ...((_column$columns = column.columns) == null ? void 0 : _column$columns.flatMap(d => d.getFlatColumns()))];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;\n      }\n    }),\n    getLeafColumns: memo(() => [table._getOrderColumnsFn()], orderColumns => {\n      var _column$columns2;\n      if ((_column$columns2 = column.columns) != null && _column$columns2.length) {\n        let leafColumns = column.columns.flatMap(column => column.getLeafColumns());\n        return orderColumns(leafColumns);\n      }\n      return [column];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;\n      }\n    })\n  };\n  for (const feature of table._features) {\n    feature.createColumn == null || feature.createColumn(column, table);\n  }\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column;\n}\n\n//\n\nfunction createHeader(table, column, options) {\n  var _options$id;\n  const id = (_options$id = options.id) != null ? _options$id : column.id;\n  let header = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null,\n    getLeafHeaders: () => {\n      const leafHeaders = [];\n      const recurseHeader = h => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader);\n        }\n        leafHeaders.push(h);\n      };\n      recurseHeader(header);\n      return leafHeaders;\n    },\n    getContext: () => ({\n      table,\n      header: header,\n      column\n    })\n  };\n  table._features.forEach(feature => {\n    feature.createHeader == null || feature.createHeader(header, table);\n  });\n  return header;\n}\nconst Headers = {\n  createTable: table => {\n    // Header Groups\n\n    table.getHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n      var _left$map$filter, _right$map$filter;\n      const leftColumns = (_left$map$filter = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter : [];\n      const rightColumns = (_right$map$filter = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter : [];\n      const centerColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n      const headerGroups = buildHeaderGroups(allColumns, [...leftColumns, ...centerColumns, ...rightColumns], table);\n      return headerGroups;\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugHeaders;\n      }\n    });\n    table.getCenterHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n      leafColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n      return buildHeaderGroups(allColumns, leafColumns, table, 'center');\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugHeaders;\n      }\n    });\n    table.getLeftHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left], (allColumns, leafColumns, left) => {\n      var _left$map$filter2;\n      const orderedLeafColumns = (_left$map$filter2 = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter2 : [];\n      return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left');\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n      debug: () => {\n        var _table$options$debugA3;\n        return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugHeaders;\n      }\n    });\n    table.getRightHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.right], (allColumns, leafColumns, right) => {\n      var _right$map$filter2;\n      const orderedLeafColumns = (_right$map$filter2 = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter2 : [];\n      return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right');\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n      debug: () => {\n        var _table$options$debugA4;\n        return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugHeaders;\n      }\n    });\n\n    // Footer Groups\n\n    table.getFooterGroups = memo(() => [table.getHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n      debug: () => {\n        var _table$options$debugA5;\n        return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugHeaders;\n      }\n    });\n    table.getLeftFooterGroups = memo(() => [table.getLeftHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n      debug: () => {\n        var _table$options$debugA6;\n        return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugHeaders;\n      }\n    });\n    table.getCenterFooterGroups = memo(() => [table.getCenterHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n      debug: () => {\n        var _table$options$debugA7;\n        return (_table$options$debugA7 = table.options.debugAll) != null ? _table$options$debugA7 : table.options.debugHeaders;\n      }\n    });\n    table.getRightFooterGroups = memo(() => [table.getRightHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n      debug: () => {\n        var _table$options$debugA8;\n        return (_table$options$debugA8 = table.options.debugAll) != null ? _table$options$debugA8 : table.options.debugHeaders;\n      }\n    });\n\n    // Flat Headers\n\n    table.getFlatHeaders = memo(() => [table.getHeaderGroups()], headerGroups => {\n      return headerGroups.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n      debug: () => {\n        var _table$options$debugA9;\n        return (_table$options$debugA9 = table.options.debugAll) != null ? _table$options$debugA9 : table.options.debugHeaders;\n      }\n    });\n    table.getLeftFlatHeaders = memo(() => [table.getLeftHeaderGroups()], left => {\n      return left.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n      debug: () => {\n        var _table$options$debugA10;\n        return (_table$options$debugA10 = table.options.debugAll) != null ? _table$options$debugA10 : table.options.debugHeaders;\n      }\n    });\n    table.getCenterFlatHeaders = memo(() => [table.getCenterHeaderGroups()], left => {\n      return left.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n      debug: () => {\n        var _table$options$debugA11;\n        return (_table$options$debugA11 = table.options.debugAll) != null ? _table$options$debugA11 : table.options.debugHeaders;\n      }\n    });\n    table.getRightFlatHeaders = memo(() => [table.getRightHeaderGroups()], left => {\n      return left.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n      debug: () => {\n        var _table$options$debugA12;\n        return (_table$options$debugA12 = table.options.debugAll) != null ? _table$options$debugA12 : table.options.debugHeaders;\n      }\n    });\n\n    // Leaf Headers\n\n    table.getCenterLeafHeaders = memo(() => [table.getCenterFlatHeaders()], flatHeaders => {\n      return flatHeaders.filter(header => {\n        var _header$subHeaders;\n        return !((_header$subHeaders = header.subHeaders) != null && _header$subHeaders.length);\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n      debug: () => {\n        var _table$options$debugA13;\n        return (_table$options$debugA13 = table.options.debugAll) != null ? _table$options$debugA13 : table.options.debugHeaders;\n      }\n    });\n    table.getLeftLeafHeaders = memo(() => [table.getLeftFlatHeaders()], flatHeaders => {\n      return flatHeaders.filter(header => {\n        var _header$subHeaders2;\n        return !((_header$subHeaders2 = header.subHeaders) != null && _header$subHeaders2.length);\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n      debug: () => {\n        var _table$options$debugA14;\n        return (_table$options$debugA14 = table.options.debugAll) != null ? _table$options$debugA14 : table.options.debugHeaders;\n      }\n    });\n    table.getRightLeafHeaders = memo(() => [table.getRightFlatHeaders()], flatHeaders => {\n      return flatHeaders.filter(header => {\n        var _header$subHeaders3;\n        return !((_header$subHeaders3 = header.subHeaders) != null && _header$subHeaders3.length);\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n      debug: () => {\n        var _table$options$debugA15;\n        return (_table$options$debugA15 = table.options.debugAll) != null ? _table$options$debugA15 : table.options.debugHeaders;\n      }\n    });\n    table.getLeafHeaders = memo(() => [table.getLeftHeaderGroups(), table.getCenterHeaderGroups(), table.getRightHeaderGroups()], (left, center, right) => {\n      var _left$0$headers, _left$, _center$0$headers, _center$, _right$0$headers, _right$;\n      return [...((_left$0$headers = (_left$ = left[0]) == null ? void 0 : _left$.headers) != null ? _left$0$headers : []), ...((_center$0$headers = (_center$ = center[0]) == null ? void 0 : _center$.headers) != null ? _center$0$headers : []), ...((_right$0$headers = (_right$ = right[0]) == null ? void 0 : _right$.headers) != null ? _right$0$headers : [])].map(header => {\n        return header.getLeafHeaders();\n      }).flat();\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n      debug: () => {\n        var _table$options$debugA16;\n        return (_table$options$debugA16 = table.options.debugAll) != null ? _table$options$debugA16 : table.options.debugHeaders;\n      }\n    });\n  }\n};\nfunction buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {\n  var _headerGroups$0$heade, _headerGroups$;\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0;\n  const findMaxDepth = function (columns, depth) {\n    if (depth === void 0) {\n      depth = 1;\n    }\n    maxDepth = Math.max(maxDepth, depth);\n    columns.filter(column => column.getIsVisible()).forEach(column => {\n      var _column$columns;\n      if ((_column$columns = column.columns) != null && _column$columns.length) {\n        findMaxDepth(column.columns, depth + 1);\n      }\n    }, 0);\n  };\n  findMaxDepth(allColumns);\n  let headerGroups = [];\n  const createHeaderGroup = (headersToGroup, depth) => {\n    // The header group we are creating\n    const headerGroup = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: []\n    };\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders = [];\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0];\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth;\n      let column;\n      let isPlaceholder = false;\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent;\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column;\n        isPlaceholder = true;\n      }\n      if (latestPendingParentHeader && (latestPendingParentHeader == null ? void 0 : latestPendingParentHeader.column) === column) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup);\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup == null ? void 0 : headerToGroup.id].filter(Boolean).join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder ? `${pendingParentHeaders.filter(d => d.column === column).length}` : undefined,\n          depth,\n          index: pendingParentHeaders.length\n        });\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup);\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header);\n      }\n      headerGroup.headers.push(headerToGroup);\n      headerToGroup.headerGroup = headerGroup;\n    });\n    headerGroups.push(headerGroup);\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1);\n    }\n  };\n  const bottomHeaders = columnsToGroup.map((column, index) => createHeader(table, column, {\n    depth: maxDepth,\n    index\n  }));\n  createHeaderGroup(bottomHeaders, maxDepth - 1);\n  headerGroups.reverse();\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = headers => {\n    const filteredHeaders = headers.filter(header => header.column.getIsVisible());\n    return filteredHeaders.map(header => {\n      let colSpan = 0;\n      let rowSpan = 0;\n      let childRowSpans = [0];\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = [];\n        recurseHeadersForSpans(header.subHeaders).forEach(_ref => {\n          let {\n            colSpan: childColSpan,\n            rowSpan: childRowSpan\n          } = _ref;\n          colSpan += childColSpan;\n          childRowSpans.push(childRowSpan);\n        });\n      } else {\n        colSpan = 1;\n      }\n      const minChildRowSpan = Math.min(...childRowSpans);\n      rowSpan = rowSpan + minChildRowSpan;\n      header.colSpan = colSpan;\n      header.rowSpan = rowSpan;\n      return {\n        colSpan,\n        rowSpan\n      };\n    });\n  };\n  recurseHeadersForSpans((_headerGroups$0$heade = (_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) != null ? _headerGroups$0$heade : []);\n  return headerGroups;\n}\n\n//\n\n//\n\nconst defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER\n};\nconst getDefaultColumnSizingInfoState = () => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: []\n});\nconst ColumnSizing = {\n  getDefaultColumnDef: () => {\n    return defaultColumnSizing;\n  },\n  getInitialState: state => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.getSize = () => {\n      var _column$columnDef$min, _ref, _column$columnDef$max;\n      const columnSize = table.getState().columnSizing[column.id];\n      return Math.min(Math.max((_column$columnDef$min = column.columnDef.minSize) != null ? _column$columnDef$min : defaultColumnSizing.minSize, (_ref = columnSize != null ? columnSize : column.columnDef.size) != null ? _ref : defaultColumnSizing.size), (_column$columnDef$max = column.columnDef.maxSize) != null ? _column$columnDef$max : defaultColumnSizing.maxSize);\n    };\n    column.getStart = position => {\n      const columns = !position ? table.getVisibleLeafColumns() : position === 'left' ? table.getLeftVisibleLeafColumns() : table.getRightVisibleLeafColumns();\n      const index = columns.findIndex(d => d.id === column.id);\n      if (index > 0) {\n        const prevSiblingColumn = columns[index - 1];\n        return prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize();\n      }\n      return 0;\n    };\n    column.resetSize = () => {\n      table.setColumnSizing(_ref2 => {\n        let {\n          [column.id]: _,\n          ...rest\n        } = _ref2;\n        return rest;\n      });\n    };\n    column.getCanResize = () => {\n      var _column$columnDef$ena, _table$options$enable;\n      return ((_column$columnDef$ena = column.columnDef.enableResizing) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnResizing) != null ? _table$options$enable : true);\n    };\n    column.getIsResizing = () => {\n      return table.getState().columnSizingInfo.isResizingColumn === column.id;\n    };\n  },\n  createHeader: (header, table) => {\n    header.getSize = () => {\n      let sum = 0;\n      const recurse = header => {\n        if (header.subHeaders.length) {\n          header.subHeaders.forEach(recurse);\n        } else {\n          var _header$column$getSiz;\n          sum += (_header$column$getSiz = header.column.getSize()) != null ? _header$column$getSiz : 0;\n        }\n      };\n      recurse(header);\n      return sum;\n    };\n    header.getStart = () => {\n      if (header.index > 0) {\n        const prevSiblingHeader = header.headerGroup.headers[header.index - 1];\n        return prevSiblingHeader.getStart() + prevSiblingHeader.getSize();\n      }\n      return 0;\n    };\n    header.getResizeHandler = () => {\n      const column = table.getColumn(header.column.id);\n      const canResize = column == null ? void 0 : column.getCanResize();\n      return e => {\n        if (!column || !canResize) {\n          return;\n        }\n        e.persist == null || e.persist();\n        if (isTouchStartEvent(e)) {\n          // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n          if (e.touches && e.touches.length > 1) {\n            return;\n          }\n        }\n        const startSize = header.getSize();\n        const columnSizingStart = header ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()]) : [[column.id, column.getSize()]];\n        const clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX;\n        const newColumnSizing = {};\n        const updateOffset = (eventType, clientXPos) => {\n          if (typeof clientXPos !== 'number') {\n            return;\n          }\n          table.setColumnSizingInfo(old => {\n            var _old$startOffset, _old$startSize;\n            const deltaOffset = clientXPos - ((_old$startOffset = old == null ? void 0 : old.startOffset) != null ? _old$startOffset : 0);\n            const deltaPercentage = Math.max(deltaOffset / ((_old$startSize = old == null ? void 0 : old.startSize) != null ? _old$startSize : 0), -0.999999);\n            old.columnSizingStart.forEach(_ref3 => {\n              let [columnId, headerSize] = _ref3;\n              newColumnSizing[columnId] = Math.round(Math.max(headerSize + headerSize * deltaPercentage, 0) * 100) / 100;\n            });\n            return {\n              ...old,\n              deltaOffset,\n              deltaPercentage\n            };\n          });\n          if (table.options.columnResizeMode === 'onChange' || eventType === 'end') {\n            table.setColumnSizing(old => ({\n              ...old,\n              ...newColumnSizing\n            }));\n          }\n        };\n        const onMove = clientXPos => updateOffset('move', clientXPos);\n        const onEnd = clientXPos => {\n          updateOffset('end', clientXPos);\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            isResizingColumn: false,\n            startOffset: null,\n            startSize: null,\n            deltaOffset: null,\n            deltaPercentage: null,\n            columnSizingStart: []\n          }));\n        };\n        const mouseEvents = {\n          moveHandler: e => onMove(e.clientX),\n          upHandler: e => {\n            document.removeEventListener('mousemove', mouseEvents.moveHandler);\n            document.removeEventListener('mouseup', mouseEvents.upHandler);\n            onEnd(e.clientX);\n          }\n        };\n        const touchEvents = {\n          moveHandler: e => {\n            if (e.cancelable) {\n              e.preventDefault();\n              e.stopPropagation();\n            }\n            onMove(e.touches[0].clientX);\n            return false;\n          },\n          upHandler: e => {\n            var _e$touches$;\n            document.removeEventListener('touchmove', touchEvents.moveHandler);\n            document.removeEventListener('touchend', touchEvents.upHandler);\n            if (e.cancelable) {\n              e.preventDefault();\n              e.stopPropagation();\n            }\n            onEnd((_e$touches$ = e.touches[0]) == null ? void 0 : _e$touches$.clientX);\n          }\n        };\n        const passiveIfSupported = passiveEventSupported() ? {\n          passive: false\n        } : false;\n        if (isTouchStartEvent(e)) {\n          document.addEventListener('touchmove', touchEvents.moveHandler, passiveIfSupported);\n          document.addEventListener('touchend', touchEvents.upHandler, passiveIfSupported);\n        } else {\n          document.addEventListener('mousemove', mouseEvents.moveHandler, passiveIfSupported);\n          document.addEventListener('mouseup', mouseEvents.upHandler, passiveIfSupported);\n        }\n        table.setColumnSizingInfo(old => ({\n          ...old,\n          startOffset: clientX,\n          startSize,\n          deltaOffset: 0,\n          deltaPercentage: 0,\n          columnSizingStart,\n          isResizingColumn: column.id\n        }));\n      };\n    };\n  },\n  createTable: table => {\n    table.setColumnSizing = updater => table.options.onColumnSizingChange == null ? void 0 : table.options.onColumnSizingChange(updater);\n    table.setColumnSizingInfo = updater => table.options.onColumnSizingInfoChange == null ? void 0 : table.options.onColumnSizingInfoChange(updater);\n    table.resetColumnSizing = defaultState => {\n      var _table$initialState$c;\n      table.setColumnSizing(defaultState ? {} : (_table$initialState$c = table.initialState.columnSizing) != null ? _table$initialState$c : {});\n    };\n    table.resetHeaderSizeInfo = defaultState => {\n      var _table$initialState$c2;\n      table.setColumnSizingInfo(defaultState ? getDefaultColumnSizingInfoState() : (_table$initialState$c2 = table.initialState.columnSizingInfo) != null ? _table$initialState$c2 : getDefaultColumnSizingInfoState());\n    };\n    table.getTotalSize = () => {\n      var _table$getHeaderGroup, _table$getHeaderGroup2;\n      return (_table$getHeaderGroup = (_table$getHeaderGroup2 = table.getHeaderGroups()[0]) == null ? void 0 : _table$getHeaderGroup2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getHeaderGroup : 0;\n    };\n    table.getLeftTotalSize = () => {\n      var _table$getLeftHeaderG, _table$getLeftHeaderG2;\n      return (_table$getLeftHeaderG = (_table$getLeftHeaderG2 = table.getLeftHeaderGroups()[0]) == null ? void 0 : _table$getLeftHeaderG2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getLeftHeaderG : 0;\n    };\n    table.getCenterTotalSize = () => {\n      var _table$getCenterHeade, _table$getCenterHeade2;\n      return (_table$getCenterHeade = (_table$getCenterHeade2 = table.getCenterHeaderGroups()[0]) == null ? void 0 : _table$getCenterHeade2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getCenterHeade : 0;\n    };\n    table.getRightTotalSize = () => {\n      var _table$getRightHeader, _table$getRightHeader2;\n      return (_table$getRightHeader = (_table$getRightHeader2 = table.getRightHeaderGroups()[0]) == null ? void 0 : _table$getRightHeader2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getRightHeader : 0;\n    };\n  }\n};\nlet passiveSupported = null;\nfunction passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported;\n  let supported = false;\n  try {\n    const options = {\n      get passive() {\n        supported = true;\n        return false;\n      }\n    };\n    const noop = () => {};\n    window.addEventListener('test', noop, options);\n    window.removeEventListener('test', noop);\n  } catch (err) {\n    supported = false;\n  }\n  passiveSupported = supported;\n  return passiveSupported;\n}\nfunction isTouchStartEvent(e) {\n  return e.type === 'touchstart';\n}\n\n//\n\nconst Expanding = {\n  getInitialState: state => {\n    return {\n      expanded: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    table._autoResetExpanded = () => {\n      var _ref, _table$options$autoRe;\n      if (!registered) {\n        table._queue(() => {\n          registered = true;\n        });\n        return;\n      }\n      if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetExpanded) != null ? _ref : !table.options.manualExpanding) {\n        if (queued) return;\n        queued = true;\n        table._queue(() => {\n          table.resetExpanded();\n          queued = false;\n        });\n      }\n    };\n    table.setExpanded = updater => table.options.onExpandedChange == null ? void 0 : table.options.onExpandedChange(updater);\n    table.toggleAllRowsExpanded = expanded => {\n      if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {\n        table.setExpanded(true);\n      } else {\n        table.setExpanded({});\n      }\n    };\n    table.resetExpanded = defaultState => {\n      var _table$initialState$e, _table$initialState;\n      table.setExpanded(defaultState ? {} : (_table$initialState$e = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.expanded) != null ? _table$initialState$e : {});\n    };\n    table.getCanSomeRowsExpand = () => {\n      return table.getPrePaginationRowModel().flatRows.some(row => row.getCanExpand());\n    };\n    table.getToggleAllRowsExpandedHandler = () => {\n      return e => {\n        e.persist == null || e.persist();\n        table.toggleAllRowsExpanded();\n      };\n    };\n    table.getIsSomeRowsExpanded = () => {\n      const expanded = table.getState().expanded;\n      return expanded === true || Object.values(expanded).some(Boolean);\n    };\n    table.getIsAllRowsExpanded = () => {\n      const expanded = table.getState().expanded;\n\n      // If expanded is true, save some cycles and return true\n      if (typeof expanded === 'boolean') {\n        return expanded === true;\n      }\n      if (!Object.keys(expanded).length) {\n        return false;\n      }\n\n      // If any row is not expanded, return false\n      if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n        return false;\n      }\n\n      // They must all be expanded :shrug:\n      return true;\n    };\n    table.getExpandedDepth = () => {\n      let maxDepth = 0;\n      const rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);\n      rowIds.forEach(id => {\n        const splitId = id.split('.');\n        maxDepth = Math.max(maxDepth, splitId.length);\n      });\n      return maxDepth;\n    };\n    table.getPreExpandedRowModel = () => table.getSortedRowModel();\n    table.getExpandedRowModel = () => {\n      if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n        table._getExpandedRowModel = table.options.getExpandedRowModel(table);\n      }\n      if (table.options.manualExpanding || !table._getExpandedRowModel) {\n        return table.getPreExpandedRowModel();\n      }\n      return table._getExpandedRowModel();\n    };\n  },\n  createRow: (row, table) => {\n    row.toggleExpanded = expanded => {\n      table.setExpanded(old => {\n        var _expanded;\n        const exists = old === true ? true : !!(old != null && old[row.id]);\n        let oldExpanded = {};\n        if (old === true) {\n          Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n            oldExpanded[rowId] = true;\n          });\n        } else {\n          oldExpanded = old;\n        }\n        expanded = (_expanded = expanded) != null ? _expanded : !exists;\n        if (!exists && expanded) {\n          return {\n            ...oldExpanded,\n            [row.id]: true\n          };\n        }\n        if (exists && !expanded) {\n          const {\n            [row.id]: _,\n            ...rest\n          } = oldExpanded;\n          return rest;\n        }\n        return old;\n      });\n    };\n    row.getIsExpanded = () => {\n      var _table$options$getIsR;\n      const expanded = table.getState().expanded;\n      return !!((_table$options$getIsR = table.options.getIsRowExpanded == null ? void 0 : table.options.getIsRowExpanded(row)) != null ? _table$options$getIsR : expanded === true || (expanded == null ? void 0 : expanded[row.id]));\n    };\n    row.getCanExpand = () => {\n      var _table$options$getRow, _table$options$enable, _row$subRows;\n      return (_table$options$getRow = table.options.getRowCanExpand == null ? void 0 : table.options.getRowCanExpand(row)) != null ? _table$options$getRow : ((_table$options$enable = table.options.enableExpanding) != null ? _table$options$enable : true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n    };\n    row.getToggleExpandedHandler = () => {\n      const canExpand = row.getCanExpand();\n      return () => {\n        if (!canExpand) return;\n        row.toggleExpanded();\n      };\n    };\n  }\n};\n\nconst includesString = (row, columnId, filterValue) => {\n  var _row$getValue;\n  const search = filterValue.toLowerCase();\n  return Boolean((_row$getValue = row.getValue(columnId)) == null || (_row$getValue = _row$getValue.toString()) == null || (_row$getValue = _row$getValue.toLowerCase()) == null ? void 0 : _row$getValue.includes(search));\n};\nincludesString.autoRemove = val => testFalsey(val);\nconst includesStringSensitive = (row, columnId, filterValue) => {\n  var _row$getValue2;\n  return Boolean((_row$getValue2 = row.getValue(columnId)) == null || (_row$getValue2 = _row$getValue2.toString()) == null ? void 0 : _row$getValue2.includes(filterValue));\n};\nincludesStringSensitive.autoRemove = val => testFalsey(val);\nconst equalsString = (row, columnId, filterValue) => {\n  var _row$getValue3;\n  return ((_row$getValue3 = row.getValue(columnId)) == null || (_row$getValue3 = _row$getValue3.toString()) == null ? void 0 : _row$getValue3.toLowerCase()) === (filterValue == null ? void 0 : filterValue.toLowerCase());\n};\nequalsString.autoRemove = val => testFalsey(val);\nconst arrIncludes = (row, columnId, filterValue) => {\n  var _row$getValue4;\n  return (_row$getValue4 = row.getValue(columnId)) == null ? void 0 : _row$getValue4.includes(filterValue);\n};\narrIncludes.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst arrIncludesAll = (row, columnId, filterValue) => {\n  return !filterValue.some(val => {\n    var _row$getValue5;\n    return !((_row$getValue5 = row.getValue(columnId)) != null && _row$getValue5.includes(val));\n  });\n};\narrIncludesAll.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst arrIncludesSome = (row, columnId, filterValue) => {\n  return filterValue.some(val => {\n    var _row$getValue6;\n    return (_row$getValue6 = row.getValue(columnId)) == null ? void 0 : _row$getValue6.includes(val);\n  });\n};\narrIncludesSome.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst equals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) === filterValue;\n};\nequals.autoRemove = val => testFalsey(val);\nconst weakEquals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) == filterValue;\n};\nweakEquals.autoRemove = val => testFalsey(val);\nconst inNumberRange = (row, columnId, filterValue) => {\n  let [min, max] = filterValue;\n  const rowValue = row.getValue(columnId);\n  return rowValue >= min && rowValue <= max;\n};\ninNumberRange.resolveFilterValue = val => {\n  let [unsafeMin, unsafeMax] = val;\n  let parsedMin = typeof unsafeMin !== 'number' ? parseFloat(unsafeMin) : unsafeMin;\n  let parsedMax = typeof unsafeMax !== 'number' ? parseFloat(unsafeMax) : unsafeMax;\n  let min = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;\n  if (min > max) {\n    const temp = min;\n    min = max;\n    max = temp;\n  }\n  return [min, max];\n};\ninNumberRange.autoRemove = val => testFalsey(val) || testFalsey(val[0]) && testFalsey(val[1]);\n\n// Export\n\nconst filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange\n};\n// Utils\n\nfunction testFalsey(val) {\n  return val === undefined || val === null || val === '';\n}\n\n//\n\nconst Filters = {\n  getDefaultColumnDef: () => {\n    return {\n      filterFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        var _table$getCoreRowMode;\n        const value = (_table$getCoreRowMode = table.getCoreRowModel().flatRows[0]) == null || (_table$getCoreRowMode = _table$getCoreRowMode._getAllCellsByColumnId()[column.id]) == null ? void 0 : _table$getCoreRowMode.getValue();\n        return typeof value === 'string' || typeof value === 'number';\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    column.getAutoFilterFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0];\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n      if (typeof value === 'string') {\n        return filterFns.includesString;\n      }\n      if (typeof value === 'number') {\n        return filterFns.inNumberRange;\n      }\n      if (typeof value === 'boolean') {\n        return filterFns.equals;\n      }\n      if (value !== null && typeof value === 'object') {\n        return filterFns.equals;\n      }\n      if (Array.isArray(value)) {\n        return filterFns.arrIncludes;\n      }\n      return filterFns.weakEquals;\n    };\n    column.getFilterFn = () => {\n      var _table$options$filter, _table$options$filter2;\n      return isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === 'auto' ? column.getAutoFilterFn() : // @ts-ignore\n      (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[column.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column.columnDef.filterFn];\n    };\n    column.getCanFilter = () => {\n      var _column$columnDef$ena, _table$options$enable, _table$options$enable2;\n      return ((_column$columnDef$ena = column.columnDef.enableColumnFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnFilters) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && !!column.accessorFn;\n    };\n    column.getCanGlobalFilter = () => {\n      var _column$columnDef$ena2, _table$options$enable3, _table$options$enable4, _table$options$getCol;\n      return ((_column$columnDef$ena2 = column.columnDef.enableGlobalFilter) != null ? _column$columnDef$ena2 : true) && ((_table$options$enable3 = table.options.enableGlobalFilter) != null ? _table$options$enable3 : true) && ((_table$options$enable4 = table.options.enableFilters) != null ? _table$options$enable4 : true) && ((_table$options$getCol = table.options.getColumnCanGlobalFilter == null ? void 0 : table.options.getColumnCanGlobalFilter(column)) != null ? _table$options$getCol : true) && !!column.accessorFn;\n    };\n    column.getIsFiltered = () => column.getFilterIndex() > -1;\n    column.getFilterValue = () => {\n      var _table$getState$colum;\n      return (_table$getState$colum = table.getState().columnFilters) == null || (_table$getState$colum = _table$getState$colum.find(d => d.id === column.id)) == null ? void 0 : _table$getState$colum.value;\n    };\n    column.getFilterIndex = () => {\n      var _table$getState$colum2, _table$getState$colum3;\n      return (_table$getState$colum2 = (_table$getState$colum3 = table.getState().columnFilters) == null ? void 0 : _table$getState$colum3.findIndex(d => d.id === column.id)) != null ? _table$getState$colum2 : -1;\n    };\n    column.setFilterValue = value => {\n      table.setColumnFilters(old => {\n        const filterFn = column.getFilterFn();\n        const previousfilter = old == null ? void 0 : old.find(d => d.id === column.id);\n        const newFilter = functionalUpdate(value, previousfilter ? previousfilter.value : undefined);\n\n        //\n        if (shouldAutoRemoveFilter(filterFn, newFilter, column)) {\n          var _old$filter;\n          return (_old$filter = old == null ? void 0 : old.filter(d => d.id !== column.id)) != null ? _old$filter : [];\n        }\n        const newFilterObj = {\n          id: column.id,\n          value: newFilter\n        };\n        if (previousfilter) {\n          var _old$map;\n          return (_old$map = old == null ? void 0 : old.map(d => {\n            if (d.id === column.id) {\n              return newFilterObj;\n            }\n            return d;\n          })) != null ? _old$map : [];\n        }\n        if (old != null && old.length) {\n          return [...old, newFilterObj];\n        }\n        return [newFilterObj];\n      });\n    };\n    column._getFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column.id);\n    column.getFacetedRowModel = () => {\n      if (!column._getFacetedRowModel) {\n        return table.getPreFilteredRowModel();\n      }\n      return column._getFacetedRowModel();\n    };\n    column._getFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, column.id);\n    column.getFacetedUniqueValues = () => {\n      if (!column._getFacetedUniqueValues) {\n        return new Map();\n      }\n      return column._getFacetedUniqueValues();\n    };\n    column._getFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, column.id);\n    column.getFacetedMinMaxValues = () => {\n      if (!column._getFacetedMinMaxValues) {\n        return undefined;\n      }\n      return column._getFacetedMinMaxValues();\n    };\n    // () => [column.getFacetedRowModel()],\n    // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n  },\n\n  createRow: (row, table) => {\n    row.columnFilters = {};\n    row.columnFiltersMeta = {};\n  },\n  createTable: table => {\n    table.getGlobalAutoFilterFn = () => {\n      return filterFns.includesString;\n    };\n    table.getGlobalFilterFn = () => {\n      var _table$options$filter3, _table$options$filter4;\n      const {\n        globalFilterFn: globalFilterFn\n      } = table.options;\n      return isFunction(globalFilterFn) ? globalFilterFn : globalFilterFn === 'auto' ? table.getGlobalAutoFilterFn() : // @ts-ignore\n      (_table$options$filter3 = (_table$options$filter4 = table.options.filterFns) == null ? void 0 : _table$options$filter4[globalFilterFn]) != null ? _table$options$filter3 : filterFns[globalFilterFn];\n    };\n    table.setColumnFilters = updater => {\n      const leafColumns = table.getAllLeafColumns();\n      const updateFn = old => {\n        var _functionalUpdate;\n        return (_functionalUpdate = functionalUpdate(updater, old)) == null ? void 0 : _functionalUpdate.filter(filter => {\n          const column = leafColumns.find(d => d.id === filter.id);\n          if (column) {\n            const filterFn = column.getFilterFn();\n            if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n              return false;\n            }\n          }\n          return true;\n        });\n      };\n      table.options.onColumnFiltersChange == null || table.options.onColumnFiltersChange(updateFn);\n    };\n    table.setGlobalFilter = updater => {\n      table.options.onGlobalFilterChange == null || table.options.onGlobalFilterChange(updater);\n    };\n    table.resetGlobalFilter = defaultState => {\n      table.setGlobalFilter(defaultState ? undefined : table.initialState.globalFilter);\n    };\n    table.resetColumnFilters = defaultState => {\n      var _table$initialState$c, _table$initialState;\n      table.setColumnFilters(defaultState ? [] : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnFilters) != null ? _table$initialState$c : []);\n    };\n    table.getPreFilteredRowModel = () => table.getCoreRowModel();\n    table.getFilteredRowModel = () => {\n      if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n        table._getFilteredRowModel = table.options.getFilteredRowModel(table);\n      }\n      if (table.options.manualFiltering || !table._getFilteredRowModel) {\n        return table.getPreFilteredRowModel();\n      }\n      return table._getFilteredRowModel();\n    };\n    table._getGlobalFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, '__global__');\n    table.getGlobalFacetedRowModel = () => {\n      if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n        return table.getPreFilteredRowModel();\n      }\n      return table._getGlobalFacetedRowModel();\n    };\n    table._getGlobalFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, '__global__');\n    table.getGlobalFacetedUniqueValues = () => {\n      if (!table._getGlobalFacetedUniqueValues) {\n        return new Map();\n      }\n      return table._getGlobalFacetedUniqueValues();\n    };\n    table._getGlobalFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, '__global__');\n    table.getGlobalFacetedMinMaxValues = () => {\n      if (!table._getGlobalFacetedMinMaxValues) {\n        return;\n      }\n      return table._getGlobalFacetedMinMaxValues();\n    };\n  }\n};\nfunction shouldAutoRemoveFilter(filterFn, value, column) {\n  return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column) : false) || typeof value === 'undefined' || typeof value === 'string' && !value;\n}\n\nconst sum = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId);\n    return sum + (typeof nextValue === 'number' ? nextValue : 0);\n  }, 0);\n};\nconst min = (columnId, _leafRows, childRows) => {\n  let min;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (min > value || min === undefined && value >= value)) {\n      min = value;\n    }\n  });\n  return min;\n};\nconst max = (columnId, _leafRows, childRows) => {\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (max < value || max === undefined && value >= value)) {\n      max = value;\n    }\n  });\n  return max;\n};\nconst extent = (columnId, _leafRows, childRows) => {\n  let min;\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value;\n      } else {\n        if (min > value) min = value;\n        if (max < value) max = value;\n      }\n    }\n  });\n  return [min, max];\n};\nconst mean = (columnId, leafRows) => {\n  let count = 0;\n  let sum = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n    if (value != null && (value = +value) >= value) {\n      ++count, sum += value;\n    }\n  });\n  if (count) return sum / count;\n  return;\n};\nconst median = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return;\n  }\n  const values = leafRows.map(row => row.getValue(columnId));\n  if (!isNumberArray(values)) {\n    return;\n  }\n  if (values.length === 1) {\n    return values[0];\n  }\n  const mid = Math.floor(values.length / 2);\n  const nums = values.sort((a, b) => a - b);\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n};\nconst unique = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values());\n};\nconst uniqueCount = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size;\n};\nconst count = (_columnId, leafRows) => {\n  return leafRows.length;\n};\nconst aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count\n};\n\n//\n\nconst Grouping = {\n  getDefaultColumnDef: () => {\n    return {\n      aggregatedCell: props => {\n        var _toString, _props$getValue;\n        return (_toString = (_props$getValue = props.getValue()) == null || _props$getValue.toString == null ? void 0 : _props$getValue.toString()) != null ? _toString : null;\n      },\n      aggregationFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      grouping: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder'\n    };\n  },\n  createColumn: (column, table) => {\n    column.toggleGrouping = () => {\n      table.setGrouping(old => {\n        // Find any existing grouping for this column\n        if (old != null && old.includes(column.id)) {\n          return old.filter(d => d !== column.id);\n        }\n        return [...(old != null ? old : []), column.id];\n      });\n    };\n    column.getCanGroup = () => {\n      var _ref, _ref2, _ref3, _column$columnDef$ena;\n      return (_ref = (_ref2 = (_ref3 = (_column$columnDef$ena = column.columnDef.enableGrouping) != null ? _column$columnDef$ena : true) != null ? _ref3 : table.options.enableGrouping) != null ? _ref2 : true) != null ? _ref : !!column.accessorFn;\n    };\n    column.getIsGrouped = () => {\n      var _table$getState$group;\n      return (_table$getState$group = table.getState().grouping) == null ? void 0 : _table$getState$group.includes(column.id);\n    };\n    column.getGroupedIndex = () => {\n      var _table$getState$group2;\n      return (_table$getState$group2 = table.getState().grouping) == null ? void 0 : _table$getState$group2.indexOf(column.id);\n    };\n    column.getToggleGroupingHandler = () => {\n      const canGroup = column.getCanGroup();\n      return () => {\n        if (!canGroup) return;\n        column.toggleGrouping();\n      };\n    };\n    column.getAutoAggregationFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0];\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n      if (typeof value === 'number') {\n        return aggregationFns.sum;\n      }\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return aggregationFns.extent;\n      }\n    };\n    column.getAggregationFn = () => {\n      var _table$options$aggreg, _table$options$aggreg2;\n      if (!column) {\n        throw new Error();\n      }\n      return isFunction(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === 'auto' ? column.getAutoAggregationFn() : (_table$options$aggreg = (_table$options$aggreg2 = table.options.aggregationFns) == null ? void 0 : _table$options$aggreg2[column.columnDef.aggregationFn]) != null ? _table$options$aggreg : aggregationFns[column.columnDef.aggregationFn];\n    };\n  },\n  createTable: table => {\n    table.setGrouping = updater => table.options.onGroupingChange == null ? void 0 : table.options.onGroupingChange(updater);\n    table.resetGrouping = defaultState => {\n      var _table$initialState$g, _table$initialState;\n      table.setGrouping(defaultState ? [] : (_table$initialState$g = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.grouping) != null ? _table$initialState$g : []);\n    };\n    table.getPreGroupedRowModel = () => table.getFilteredRowModel();\n    table.getGroupedRowModel = () => {\n      if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n        table._getGroupedRowModel = table.options.getGroupedRowModel(table);\n      }\n      if (table.options.manualGrouping || !table._getGroupedRowModel) {\n        return table.getPreGroupedRowModel();\n      }\n      return table._getGroupedRowModel();\n    };\n  },\n  createRow: (row, table) => {\n    row.getIsGrouped = () => !!row.groupingColumnId;\n    row.getGroupingValue = columnId => {\n      if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n        return row._groupingValuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.columnDef.getGroupingValue)) {\n        return row.getValue(columnId);\n      }\n      row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(row.original);\n      return row._groupingValuesCache[columnId];\n    };\n    row._groupingValuesCache = {};\n  },\n  createCell: (cell, column, row, table) => {\n    cell.getIsGrouped = () => column.getIsGrouped() && column.id === row.groupingColumnId;\n    cell.getIsPlaceholder = () => !cell.getIsGrouped() && column.getIsGrouped();\n    cell.getIsAggregated = () => {\n      var _row$subRows;\n      return !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n    };\n  }\n};\nfunction orderColumns(leafColumns, grouping, groupedColumnMode) {\n  if (!(grouping != null && grouping.length) || !groupedColumnMode) {\n    return leafColumns;\n  }\n  const nonGroupingColumns = leafColumns.filter(col => !grouping.includes(col.id));\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns;\n  }\n  const groupingColumns = grouping.map(g => leafColumns.find(col => col.id === g)).filter(Boolean);\n  return [...groupingColumns, ...nonGroupingColumns];\n}\n\n//\n\nconst Ordering = {\n  getInitialState: state => {\n    return {\n      columnOrder: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table)\n    };\n  },\n  createTable: table => {\n    table.setColumnOrder = updater => table.options.onColumnOrderChange == null ? void 0 : table.options.onColumnOrderChange(updater);\n    table.resetColumnOrder = defaultState => {\n      var _table$initialState$c;\n      table.setColumnOrder(defaultState ? [] : (_table$initialState$c = table.initialState.columnOrder) != null ? _table$initialState$c : []);\n    };\n    table._getOrderColumnsFn = memo(() => [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode], (columnOrder, grouping, groupedColumnMode) => columns => {\n      // Sort grouped columns to the start of the column list\n      // before the headers are built\n      let orderedColumns = [];\n\n      // If there is no order, return the normal columns\n      if (!(columnOrder != null && columnOrder.length)) {\n        orderedColumns = columns;\n      } else {\n        const columnOrderCopy = [...columnOrder];\n\n        // If there is an order, make a copy of the columns\n        const columnsCopy = [...columns];\n\n        // And make a new ordered array of the columns\n\n        // Loop over the columns and place them in order into the new array\n        while (columnsCopy.length && columnOrderCopy.length) {\n          const targetColumnId = columnOrderCopy.shift();\n          const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId);\n          if (foundIndex > -1) {\n            orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);\n          }\n        }\n\n        // If there are any columns left, add them to the end\n        orderedColumns = [...orderedColumns, ...columnsCopy];\n      }\n      return orderColumns(orderedColumns, grouping, groupedColumnMode);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn'\n      // debug: () => table.options.debugAll ?? table.options.debugTable,\n    });\n  }\n};\n\n//\n\nconst defaultPageIndex = 0;\nconst defaultPageSize = 10;\nconst getDefaultPaginationState = () => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize\n});\nconst Pagination = {\n  getInitialState: state => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...(state == null ? void 0 : state.pagination)\n      }\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table)\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    table._autoResetPageIndex = () => {\n      var _ref, _table$options$autoRe;\n      if (!registered) {\n        table._queue(() => {\n          registered = true;\n        });\n        return;\n      }\n      if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetPageIndex) != null ? _ref : !table.options.manualPagination) {\n        if (queued) return;\n        queued = true;\n        table._queue(() => {\n          table.resetPageIndex();\n          queued = false;\n        });\n      }\n    };\n    table.setPagination = updater => {\n      const safeUpdater = old => {\n        let newState = functionalUpdate(updater, old);\n        return newState;\n      };\n      return table.options.onPaginationChange == null ? void 0 : table.options.onPaginationChange(safeUpdater);\n    };\n    table.resetPagination = defaultState => {\n      var _table$initialState$p;\n      table.setPagination(defaultState ? getDefaultPaginationState() : (_table$initialState$p = table.initialState.pagination) != null ? _table$initialState$p : getDefaultPaginationState());\n    };\n    table.setPageIndex = updater => {\n      table.setPagination(old => {\n        let pageIndex = functionalUpdate(updater, old.pageIndex);\n        const maxPageIndex = typeof table.options.pageCount === 'undefined' || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;\n        pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex));\n        return {\n          ...old,\n          pageIndex\n        };\n      });\n    };\n    table.resetPageIndex = defaultState => {\n      var _table$initialState$p2, _table$initialState;\n      table.setPageIndex(defaultState ? defaultPageIndex : (_table$initialState$p2 = (_table$initialState = table.initialState) == null || (_table$initialState = _table$initialState.pagination) == null ? void 0 : _table$initialState.pageIndex) != null ? _table$initialState$p2 : defaultPageIndex);\n    };\n    table.resetPageSize = defaultState => {\n      var _table$initialState$p3, _table$initialState2;\n      table.setPageSize(defaultState ? defaultPageSize : (_table$initialState$p3 = (_table$initialState2 = table.initialState) == null || (_table$initialState2 = _table$initialState2.pagination) == null ? void 0 : _table$initialState2.pageSize) != null ? _table$initialState$p3 : defaultPageSize);\n    };\n    table.setPageSize = updater => {\n      table.setPagination(old => {\n        const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize));\n        const topRowIndex = old.pageSize * old.pageIndex;\n        const pageIndex = Math.floor(topRowIndex / pageSize);\n        return {\n          ...old,\n          pageIndex,\n          pageSize\n        };\n      });\n    };\n    table.setPageCount = updater => table.setPagination(old => {\n      var _table$options$pageCo;\n      let newPageCount = functionalUpdate(updater, (_table$options$pageCo = table.options.pageCount) != null ? _table$options$pageCo : -1);\n      if (typeof newPageCount === 'number') {\n        newPageCount = Math.max(-1, newPageCount);\n      }\n      return {\n        ...old,\n        pageCount: newPageCount\n      };\n    });\n    table.getPageOptions = memo(() => [table.getPageCount()], pageCount => {\n      let pageOptions = [];\n      if (pageCount && pageCount > 0) {\n        pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i);\n      }\n      return pageOptions;\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n      }\n    });\n    table.getCanPreviousPage = () => table.getState().pagination.pageIndex > 0;\n    table.getCanNextPage = () => {\n      const {\n        pageIndex\n      } = table.getState().pagination;\n      const pageCount = table.getPageCount();\n      if (pageCount === -1) {\n        return true;\n      }\n      if (pageCount === 0) {\n        return false;\n      }\n      return pageIndex < pageCount - 1;\n    };\n    table.previousPage = () => {\n      return table.setPageIndex(old => old - 1);\n    };\n    table.nextPage = () => {\n      return table.setPageIndex(old => {\n        return old + 1;\n      });\n    };\n    table.getPrePaginationRowModel = () => table.getExpandedRowModel();\n    table.getPaginationRowModel = () => {\n      if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {\n        table._getPaginationRowModel = table.options.getPaginationRowModel(table);\n      }\n      if (table.options.manualPagination || !table._getPaginationRowModel) {\n        return table.getPrePaginationRowModel();\n      }\n      return table._getPaginationRowModel();\n    };\n    table.getPageCount = () => {\n      var _table$options$pageCo2;\n      return (_table$options$pageCo2 = table.options.pageCount) != null ? _table$options$pageCo2 : Math.ceil(table.getPrePaginationRowModel().rows.length / table.getState().pagination.pageSize);\n    };\n  }\n};\n\n//\n\nconst getDefaultPinningState = () => ({\n  left: [],\n  right: []\n});\nconst Pinning = {\n  getInitialState: state => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.pin = position => {\n      const columnIds = column.getLeafColumns().map(d => d.id).filter(Boolean);\n      table.setColumnPinning(old => {\n        var _old$left3, _old$right3;\n        if (position === 'right') {\n          var _old$left, _old$right;\n          return {\n            left: ((_old$left = old == null ? void 0 : old.left) != null ? _old$left : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n            right: [...((_old$right = old == null ? void 0 : old.right) != null ? _old$right : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds]\n          };\n        }\n        if (position === 'left') {\n          var _old$left2, _old$right2;\n          return {\n            left: [...((_old$left2 = old == null ? void 0 : old.left) != null ? _old$left2 : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds],\n            right: ((_old$right2 = old == null ? void 0 : old.right) != null ? _old$right2 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n          };\n        }\n        return {\n          left: ((_old$left3 = old == null ? void 0 : old.left) != null ? _old$left3 : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n          right: ((_old$right3 = old == null ? void 0 : old.right) != null ? _old$right3 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n        };\n      });\n    };\n    column.getCanPin = () => {\n      const leafColumns = column.getLeafColumns();\n      return leafColumns.some(d => {\n        var _d$columnDef$enablePi, _table$options$enable;\n        return ((_d$columnDef$enablePi = d.columnDef.enablePinning) != null ? _d$columnDef$enablePi : true) && ((_table$options$enable = table.options.enablePinning) != null ? _table$options$enable : true);\n      });\n    };\n    column.getIsPinned = () => {\n      const leafColumnIds = column.getLeafColumns().map(d => d.id);\n      const {\n        left,\n        right\n      } = table.getState().columnPinning;\n      const isLeft = leafColumnIds.some(d => left == null ? void 0 : left.includes(d));\n      const isRight = leafColumnIds.some(d => right == null ? void 0 : right.includes(d));\n      return isLeft ? 'left' : isRight ? 'right' : false;\n    };\n    column.getPinnedIndex = () => {\n      var _table$getState$colum, _table$getState$colum2;\n      const position = column.getIsPinned();\n      return position ? (_table$getState$colum = (_table$getState$colum2 = table.getState().columnPinning) == null || (_table$getState$colum2 = _table$getState$colum2[position]) == null ? void 0 : _table$getState$colum2.indexOf(column.id)) != null ? _table$getState$colum : -1 : 0;\n    };\n  },\n  createRow: (row, table) => {\n    row.getCenterVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allCells, left, right) => {\n      const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n      return allCells.filter(d => !leftAndRight.includes(d.column.id));\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'row.getCenterVisibleCells',\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n      }\n    });\n    row.getLeftVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left,,], (allCells, left) => {\n      const cells = (left != null ? left : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n        ...d,\n        position: 'left'\n      }));\n      return cells;\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n      }\n    });\n    row.getRightVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.right], (allCells, right) => {\n      const cells = (right != null ? right : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n        ...d,\n        position: 'right'\n      }));\n      return cells;\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n      debug: () => {\n        var _table$options$debugA3;\n        return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugRows;\n      }\n    });\n  },\n  createTable: table => {\n    table.setColumnPinning = updater => table.options.onColumnPinningChange == null ? void 0 : table.options.onColumnPinningChange(updater);\n    table.resetColumnPinning = defaultState => {\n      var _table$initialState$c, _table$initialState;\n      return table.setColumnPinning(defaultState ? getDefaultPinningState() : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnPinning) != null ? _table$initialState$c : getDefaultPinningState());\n    };\n    table.getIsSomeColumnsPinned = position => {\n      var _pinningState$positio;\n      const pinningState = table.getState().columnPinning;\n      if (!position) {\n        var _pinningState$left, _pinningState$right;\n        return Boolean(((_pinningState$left = pinningState.left) == null ? void 0 : _pinningState$left.length) || ((_pinningState$right = pinningState.right) == null ? void 0 : _pinningState$right.length));\n      }\n      return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\n    };\n    table.getLeftLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left], (allColumns, left) => {\n      return (left != null ? left : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n      debug: () => {\n        var _table$options$debugA4;\n        return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;\n      }\n    });\n    table.getRightLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.right], (allColumns, right) => {\n      return (right != null ? right : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n      debug: () => {\n        var _table$options$debugA5;\n        return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;\n      }\n    });\n    table.getCenterLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, left, right) => {\n      const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n      return allColumns.filter(d => !leftAndRight.includes(d.id));\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n      debug: () => {\n        var _table$options$debugA6;\n        return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugColumns;\n      }\n    });\n  }\n};\n\n//\n\nconst RowSelection = {\n  getInitialState: state => {\n    return {\n      rowSelection: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    };\n  },\n\n  createTable: table => {\n    table.setRowSelection = updater => table.options.onRowSelectionChange == null ? void 0 : table.options.onRowSelectionChange(updater);\n    table.resetRowSelection = defaultState => {\n      var _table$initialState$r;\n      return table.setRowSelection(defaultState ? {} : (_table$initialState$r = table.initialState.rowSelection) != null ? _table$initialState$r : {});\n    };\n    table.toggleAllRowsSelected = value => {\n      table.setRowSelection(old => {\n        value = typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected();\n        const rowSelection = {\n          ...old\n        };\n        const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows;\n\n        // We don't use `mutateRowIsSelected` here for performance reasons.\n        // All of the rows are flat already, so it wouldn't be worth it\n        if (value) {\n          preGroupedFlatRows.forEach(row => {\n            if (!row.getCanSelect()) {\n              return;\n            }\n            rowSelection[row.id] = true;\n          });\n        } else {\n          preGroupedFlatRows.forEach(row => {\n            delete rowSelection[row.id];\n          });\n        }\n        return rowSelection;\n      });\n    };\n    table.toggleAllPageRowsSelected = value => table.setRowSelection(old => {\n      const resolvedValue = typeof value !== 'undefined' ? value : !table.getIsAllPageRowsSelected();\n      const rowSelection = {\n        ...old\n      };\n      table.getRowModel().rows.forEach(row => {\n        mutateRowIsSelected(rowSelection, row.id, resolvedValue, table);\n      });\n      return rowSelection;\n    });\n\n    // addRowSelectionRange: rowId => {\n    //   const {\n    //     rows,\n    //     rowsById,\n    //     options: { selectGroupingRows, selectSubRows },\n    //   } = table\n\n    //   const findSelectedRow = (rows: Row[]) => {\n    //     let found\n    //     rows.find(d => {\n    //       if (d.getIsSelected()) {\n    //         found = d\n    //         return true\n    //       }\n    //       const subFound = findSelectedRow(d.subRows || [])\n    //       if (subFound) {\n    //         found = subFound\n    //         return true\n    //       }\n    //       return false\n    //     })\n    //     return found\n    //   }\n\n    //   const firstRow = findSelectedRow(rows) || rows[0]\n    //   const lastRow = rowsById[rowId]\n\n    //   let include = false\n    //   const selectedRowIds = {}\n\n    //   const addRow = (row: Row) => {\n    //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n    //       rowsById,\n    //       selectGroupingRows: selectGroupingRows!,\n    //       selectSubRows: selectSubRows!,\n    //     })\n    //   }\n\n    //   table.rows.forEach(row => {\n    //     const isFirstRow = row.id === firstRow.id\n    //     const isLastRow = row.id === lastRow.id\n\n    //     if (isFirstRow || isLastRow) {\n    //       if (!include) {\n    //         include = true\n    //       } else if (include) {\n    //         addRow(row)\n    //         include = false\n    //       }\n    //     }\n\n    //     if (include) {\n    //       addRow(row)\n    //     }\n    //   })\n\n    //   table.setRowSelection(selectedRowIds)\n    // },\n    table.getPreSelectedRowModel = () => table.getCoreRowModel();\n    table.getSelectedRowModel = memo(() => [table.getState().rowSelection, table.getCoreRowModel()], (rowSelection, rowModel) => {\n      if (!Object.keys(rowSelection).length) {\n        return {\n          rows: [],\n          flatRows: [],\n          rowsById: {}\n        };\n      }\n      return selectRowsFn(table, rowModel);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n      }\n    });\n    table.getFilteredSelectedRowModel = memo(() => [table.getState().rowSelection, table.getFilteredRowModel()], (rowSelection, rowModel) => {\n      if (!Object.keys(rowSelection).length) {\n        return {\n          rows: [],\n          flatRows: [],\n          rowsById: {}\n        };\n      }\n      return selectRowsFn(table, rowModel);\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'getFilteredSelectedRowModel',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugTable;\n      }\n    });\n    table.getGroupedSelectedRowModel = memo(() => [table.getState().rowSelection, table.getSortedRowModel()], (rowSelection, rowModel) => {\n      if (!Object.keys(rowSelection).length) {\n        return {\n          rows: [],\n          flatRows: [],\n          rowsById: {}\n        };\n      }\n      return selectRowsFn(table, rowModel);\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'getGroupedSelectedRowModel',\n      debug: () => {\n        var _table$options$debugA3;\n        return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugTable;\n      }\n    });\n\n    ///\n\n    // getGroupingRowCanSelect: rowId => {\n    //   const row = table.getRow(rowId)\n\n    //   if (!row) {\n    //     throw new Error()\n    //   }\n\n    //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n    //     return table.options.enableGroupingRowSelection(row)\n    //   }\n\n    //   return table.options.enableGroupingRowSelection ?? false\n    // },\n\n    table.getIsAllRowsSelected = () => {\n      const preGroupedFlatRows = table.getFilteredRowModel().flatRows;\n      const {\n        rowSelection\n      } = table.getState();\n      let isAllRowsSelected = Boolean(preGroupedFlatRows.length && Object.keys(rowSelection).length);\n      if (isAllRowsSelected) {\n        if (preGroupedFlatRows.some(row => row.getCanSelect() && !rowSelection[row.id])) {\n          isAllRowsSelected = false;\n        }\n      }\n      return isAllRowsSelected;\n    };\n    table.getIsAllPageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows.filter(row => row.getCanSelect());\n      const {\n        rowSelection\n      } = table.getState();\n      let isAllPageRowsSelected = !!paginationFlatRows.length;\n      if (isAllPageRowsSelected && paginationFlatRows.some(row => !rowSelection[row.id])) {\n        isAllPageRowsSelected = false;\n      }\n      return isAllPageRowsSelected;\n    };\n    table.getIsSomeRowsSelected = () => {\n      var _table$getState$rowSe;\n      const totalSelected = Object.keys((_table$getState$rowSe = table.getState().rowSelection) != null ? _table$getState$rowSe : {}).length;\n      return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;\n    };\n    table.getIsSomePageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows;\n      return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.filter(row => row.getCanSelect()).some(d => d.getIsSelected() || d.getIsSomeSelected());\n    };\n    table.getToggleAllRowsSelectedHandler = () => {\n      return e => {\n        table.toggleAllRowsSelected(e.target.checked);\n      };\n    };\n    table.getToggleAllPageRowsSelectedHandler = () => {\n      return e => {\n        table.toggleAllPageRowsSelected(e.target.checked);\n      };\n    };\n  },\n  createRow: (row, table) => {\n    row.toggleSelected = value => {\n      const isSelected = row.getIsSelected();\n      table.setRowSelection(old => {\n        value = typeof value !== 'undefined' ? value : !isSelected;\n        if (isSelected === value) {\n          return old;\n        }\n        const selectedRowIds = {\n          ...old\n        };\n        mutateRowIsSelected(selectedRowIds, row.id, value, table);\n        return selectedRowIds;\n      });\n    };\n    row.getIsSelected = () => {\n      const {\n        rowSelection\n      } = table.getState();\n      return isRowSelected(row, rowSelection);\n    };\n    row.getIsSomeSelected = () => {\n      const {\n        rowSelection\n      } = table.getState();\n      return isSubRowSelected(row, rowSelection) === 'some';\n    };\n    row.getIsAllSubRowsSelected = () => {\n      const {\n        rowSelection\n      } = table.getState();\n      return isSubRowSelected(row, rowSelection) === 'all';\n    };\n    row.getCanSelect = () => {\n      var _table$options$enable;\n      if (typeof table.options.enableRowSelection === 'function') {\n        return table.options.enableRowSelection(row);\n      }\n      return (_table$options$enable = table.options.enableRowSelection) != null ? _table$options$enable : true;\n    };\n    row.getCanSelectSubRows = () => {\n      var _table$options$enable2;\n      if (typeof table.options.enableSubRowSelection === 'function') {\n        return table.options.enableSubRowSelection(row);\n      }\n      return (_table$options$enable2 = table.options.enableSubRowSelection) != null ? _table$options$enable2 : true;\n    };\n    row.getCanMultiSelect = () => {\n      var _table$options$enable3;\n      if (typeof table.options.enableMultiRowSelection === 'function') {\n        return table.options.enableMultiRowSelection(row);\n      }\n      return (_table$options$enable3 = table.options.enableMultiRowSelection) != null ? _table$options$enable3 : true;\n    };\n    row.getToggleSelectedHandler = () => {\n      const canSelect = row.getCanSelect();\n      return e => {\n        var _target;\n        if (!canSelect) return;\n        row.toggleSelected((_target = e.target) == null ? void 0 : _target.checked);\n      };\n    };\n  }\n};\nconst mutateRowIsSelected = (selectedRowIds, id, value, table) => {\n  var _row$subRows;\n  const row = table.getRow(id);\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key]);\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true;\n    }\n  } else {\n    delete selectedRowIds[id];\n  }\n  // }\n\n  if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row => mutateRowIsSelected(selectedRowIds, row.id, value, table));\n  }\n};\nfunction selectRowsFn(table, rowModel) {\n  const rowSelection = table.getState().rowSelection;\n  const newSelectedFlatRows = [];\n  const newSelectedRowsById = {};\n\n  // Filters top level and nested rows\n  const recurseRows = function (rows, depth) {\n    return rows.map(row => {\n      var _row$subRows2;\n      const isSelected = isRowSelected(row, rowSelection);\n      if (isSelected) {\n        newSelectedFlatRows.push(row);\n        newSelectedRowsById[row.id] = row;\n      }\n      if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {\n        row = {\n          ...row,\n          subRows: recurseRows(row.subRows)\n        };\n      }\n      if (isSelected) {\n        return row;\n      }\n    }).filter(Boolean);\n  };\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById\n  };\n}\nfunction isRowSelected(row, selection) {\n  var _selection$row$id;\n  return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false;\n}\nfunction isSubRowSelected(row, selection, table) {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true;\n    let someSelected = false;\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return;\n      }\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    });\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false;\n  }\n  return false;\n}\n\nconst reSplitAlphaNumeric = /([0-9]+)/gm;\nconst alphanumeric = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\nconst alphanumericCaseSensitive = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\nconst datetime = (rowA, rowB, columnId) => {\n  const a = rowA.getValue(columnId);\n  const b = rowB.getValue(columnId);\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0;\n};\nconst basic = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));\n};\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n    return String(a);\n  }\n  if (typeof a === 'string') {\n    return a;\n  }\n  return '';\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr, bStr) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean);\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean);\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift();\n    const bb = b.shift();\n    const an = parseInt(aa, 10);\n    const bn = parseInt(bb, 10);\n    const combo = [an, bn].sort();\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n      if (bb > aa) {\n        return -1;\n      }\n      continue;\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1;\n    }\n    if (bn > an) {\n      return -1;\n    }\n  }\n  return a.length - b.length;\n}\n\n// Exports\n\nconst sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic\n};\n\n//\n\nconst Sorting = {\n  getInitialState: state => {\n    return {\n      sorting: [],\n      ...state\n    };\n  },\n  getDefaultColumnDef: () => {\n    return {\n      sortingFn: 'auto',\n      sortUndefined: 1\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: e => {\n        return e.shiftKey;\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    column.getAutoSortingFn = () => {\n      const firstRows = table.getFilteredRowModel().flatRows.slice(10);\n      let isString = false;\n      for (const row of firstRows) {\n        const value = row == null ? void 0 : row.getValue(column.id);\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return sortingFns.datetime;\n        }\n        if (typeof value === 'string') {\n          isString = true;\n          if (value.split(reSplitAlphaNumeric).length > 1) {\n            return sortingFns.alphanumeric;\n          }\n        }\n      }\n      if (isString) {\n        return sortingFns.text;\n      }\n      return sortingFns.basic;\n    };\n    column.getAutoSortDir = () => {\n      const firstRow = table.getFilteredRowModel().flatRows[0];\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n      if (typeof value === 'string') {\n        return 'asc';\n      }\n      return 'desc';\n    };\n    column.getSortingFn = () => {\n      var _table$options$sortin, _table$options$sortin2;\n      if (!column) {\n        throw new Error();\n      }\n      return isFunction(column.columnDef.sortingFn) ? column.columnDef.sortingFn : column.columnDef.sortingFn === 'auto' ? column.getAutoSortingFn() : (_table$options$sortin = (_table$options$sortin2 = table.options.sortingFns) == null ? void 0 : _table$options$sortin2[column.columnDef.sortingFn]) != null ? _table$options$sortin : sortingFns[column.columnDef.sortingFn];\n    };\n    column.toggleSorting = (desc, multi) => {\n      // if (column.columns.length) {\n      //   column.columns.forEach((c, i) => {\n      //     if (c.id) {\n      //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n      //     }\n      //   })\n      //   return\n      // }\n\n      // this needs to be outside of table.setSorting to be in sync with rerender\n      const nextSortingOrder = column.getNextSortingOrder();\n      const hasManualValue = typeof desc !== 'undefined' && desc !== null;\n      table.setSorting(old => {\n        // Find any existing sorting for this column\n        const existingSorting = old == null ? void 0 : old.find(d => d.id === column.id);\n        const existingIndex = old == null ? void 0 : old.findIndex(d => d.id === column.id);\n        let newSorting = [];\n\n        // What should we do with this sort action?\n        let sortAction;\n        let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc';\n\n        // Multi-mode\n        if (old != null && old.length && column.getCanMultiSort() && multi) {\n          if (existingSorting) {\n            sortAction = 'toggle';\n          } else {\n            sortAction = 'add';\n          }\n        } else {\n          // Normal mode\n          if (old != null && old.length && existingIndex !== old.length - 1) {\n            sortAction = 'replace';\n          } else if (existingSorting) {\n            sortAction = 'toggle';\n          } else {\n            sortAction = 'replace';\n          }\n        }\n\n        // Handle toggle states that will remove the sorting\n        if (sortAction === 'toggle') {\n          // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n          if (!hasManualValue) {\n            // Is our intention to remove?\n            if (!nextSortingOrder) {\n              sortAction = 'remove';\n            }\n          }\n        }\n        if (sortAction === 'add') {\n          var _table$options$maxMul;\n          newSorting = [...old, {\n            id: column.id,\n            desc: nextDesc\n          }];\n          // Take latest n columns\n          newSorting.splice(0, newSorting.length - ((_table$options$maxMul = table.options.maxMultiSortColCount) != null ? _table$options$maxMul : Number.MAX_SAFE_INTEGER));\n        } else if (sortAction === 'toggle') {\n          // This flips (or sets) the\n          newSorting = old.map(d => {\n            if (d.id === column.id) {\n              return {\n                ...d,\n                desc: nextDesc\n              };\n            }\n            return d;\n          });\n        } else if (sortAction === 'remove') {\n          newSorting = old.filter(d => d.id !== column.id);\n        } else {\n          newSorting = [{\n            id: column.id,\n            desc: nextDesc\n          }];\n        }\n        return newSorting;\n      });\n    };\n    column.getFirstSortDir = () => {\n      var _ref, _column$columnDef$sor;\n      const sortDescFirst = (_ref = (_column$columnDef$sor = column.columnDef.sortDescFirst) != null ? _column$columnDef$sor : table.options.sortDescFirst) != null ? _ref : column.getAutoSortDir() === 'desc';\n      return sortDescFirst ? 'desc' : 'asc';\n    };\n    column.getNextSortingOrder = multi => {\n      var _table$options$enable, _table$options$enable2;\n      const firstSortDirection = column.getFirstSortDir();\n      const isSorted = column.getIsSorted();\n      if (!isSorted) {\n        return firstSortDirection;\n      }\n      if (isSorted !== firstSortDirection && ((_table$options$enable = table.options.enableSortingRemoval) != null ? _table$options$enable : true) && (\n      // If enableSortRemove, enable in general\n      multi ? (_table$options$enable2 = table.options.enableMultiRemove) != null ? _table$options$enable2 : true : true) // If multi, don't allow if enableMultiRemove))\n      ) {\n        return false;\n      }\n      return isSorted === 'desc' ? 'asc' : 'desc';\n    };\n    column.getCanSort = () => {\n      var _column$columnDef$ena, _table$options$enable3;\n      return ((_column$columnDef$ena = column.columnDef.enableSorting) != null ? _column$columnDef$ena : true) && ((_table$options$enable3 = table.options.enableSorting) != null ? _table$options$enable3 : true) && !!column.accessorFn;\n    };\n    column.getCanMultiSort = () => {\n      var _ref2, _column$columnDef$ena2;\n      return (_ref2 = (_column$columnDef$ena2 = column.columnDef.enableMultiSort) != null ? _column$columnDef$ena2 : table.options.enableMultiSort) != null ? _ref2 : !!column.accessorFn;\n    };\n    column.getIsSorted = () => {\n      var _table$getState$sorti;\n      const columnSort = (_table$getState$sorti = table.getState().sorting) == null ? void 0 : _table$getState$sorti.find(d => d.id === column.id);\n      return !columnSort ? false : columnSort.desc ? 'desc' : 'asc';\n    };\n    column.getSortIndex = () => {\n      var _table$getState$sorti2, _table$getState$sorti3;\n      return (_table$getState$sorti2 = (_table$getState$sorti3 = table.getState().sorting) == null ? void 0 : _table$getState$sorti3.findIndex(d => d.id === column.id)) != null ? _table$getState$sorti2 : -1;\n    };\n    column.clearSorting = () => {\n      //clear sorting for just 1 column\n      table.setSorting(old => old != null && old.length ? old.filter(d => d.id !== column.id) : []);\n    };\n    column.getToggleSortingHandler = () => {\n      const canSort = column.getCanSort();\n      return e => {\n        if (!canSort) return;\n        e.persist == null || e.persist();\n        column.toggleSorting == null || column.toggleSorting(undefined, column.getCanMultiSort() ? table.options.isMultiSortEvent == null ? void 0 : table.options.isMultiSortEvent(e) : false);\n      };\n    };\n  },\n  createTable: table => {\n    table.setSorting = updater => table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater);\n    table.resetSorting = defaultState => {\n      var _table$initialState$s, _table$initialState;\n      table.setSorting(defaultState ? [] : (_table$initialState$s = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.sorting) != null ? _table$initialState$s : []);\n    };\n    table.getPreSortedRowModel = () => table.getGroupedRowModel();\n    table.getSortedRowModel = () => {\n      if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n        table._getSortedRowModel = table.options.getSortedRowModel(table);\n      }\n      if (table.options.manualSorting || !table._getSortedRowModel) {\n        return table.getPreSortedRowModel();\n      }\n      return table._getSortedRowModel();\n    };\n  }\n};\n\n//\n\nconst Visibility = {\n  getInitialState: state => {\n    return {\n      columnVisibility: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.toggleVisibility = value => {\n      if (column.getCanHide()) {\n        table.setColumnVisibility(old => ({\n          ...old,\n          [column.id]: value != null ? value : !column.getIsVisible()\n        }));\n      }\n    };\n    column.getIsVisible = () => {\n      var _table$getState$colum, _table$getState$colum2;\n      return (_table$getState$colum = (_table$getState$colum2 = table.getState().columnVisibility) == null ? void 0 : _table$getState$colum2[column.id]) != null ? _table$getState$colum : true;\n    };\n    column.getCanHide = () => {\n      var _column$columnDef$ena, _table$options$enable;\n      return ((_column$columnDef$ena = column.columnDef.enableHiding) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableHiding) != null ? _table$options$enable : true);\n    };\n    column.getToggleVisibilityHandler = () => {\n      return e => {\n        column.toggleVisibility == null || column.toggleVisibility(e.target.checked);\n      };\n    };\n  },\n  createRow: (row, table) => {\n    row._getAllVisibleCells = memo(() => [row.getAllCells(), table.getState().columnVisibility], cells => {\n      return cells.filter(cell => cell.column.getIsVisible());\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n      }\n    });\n    row.getVisibleCells = memo(() => [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()], (left, center, right) => [...left, ...center, ...right], {\n      key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n      }\n    });\n  },\n  createTable: table => {\n    const makeVisibleColumnsMethod = (key, getColumns) => {\n      return memo(() => [getColumns(), getColumns().filter(d => d.getIsVisible()).map(d => d.id).join('_')], columns => {\n        return columns.filter(d => d.getIsVisible == null ? void 0 : d.getIsVisible());\n      }, {\n        key,\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;\n        }\n      });\n    };\n    table.getVisibleFlatColumns = makeVisibleColumnsMethod('getVisibleFlatColumns', () => table.getAllFlatColumns());\n    table.getVisibleLeafColumns = makeVisibleColumnsMethod('getVisibleLeafColumns', () => table.getAllLeafColumns());\n    table.getLeftVisibleLeafColumns = makeVisibleColumnsMethod('getLeftVisibleLeafColumns', () => table.getLeftLeafColumns());\n    table.getRightVisibleLeafColumns = makeVisibleColumnsMethod('getRightVisibleLeafColumns', () => table.getRightLeafColumns());\n    table.getCenterVisibleLeafColumns = makeVisibleColumnsMethod('getCenterVisibleLeafColumns', () => table.getCenterLeafColumns());\n    table.setColumnVisibility = updater => table.options.onColumnVisibilityChange == null ? void 0 : table.options.onColumnVisibilityChange(updater);\n    table.resetColumnVisibility = defaultState => {\n      var _table$initialState$c;\n      table.setColumnVisibility(defaultState ? {} : (_table$initialState$c = table.initialState.columnVisibility) != null ? _table$initialState$c : {});\n    };\n    table.toggleAllColumnsVisible = value => {\n      var _value;\n      value = (_value = value) != null ? _value : !table.getIsAllColumnsVisible();\n      table.setColumnVisibility(table.getAllLeafColumns().reduce((obj, column) => ({\n        ...obj,\n        [column.id]: !value ? !(column.getCanHide != null && column.getCanHide()) : value\n      }), {}));\n    };\n    table.getIsAllColumnsVisible = () => !table.getAllLeafColumns().some(column => !(column.getIsVisible != null && column.getIsVisible()));\n    table.getIsSomeColumnsVisible = () => table.getAllLeafColumns().some(column => column.getIsVisible == null ? void 0 : column.getIsVisible());\n    table.getToggleAllColumnsVisibilityHandler = () => {\n      return e => {\n        var _target;\n        table.toggleAllColumnsVisible((_target = e.target) == null ? void 0 : _target.checked);\n      };\n    };\n  }\n};\n\nconst features = [Headers, Visibility, Ordering, Pinning, Filters, Sorting, Grouping, Expanding, Pagination, RowSelection, ColumnSizing];\n\n//\n\nfunction createTable(options) {\n  var _options$initialState;\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...');\n  }\n  let table = {\n    _features: features\n  };\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));\n  }, {});\n  const mergeOptions = options => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options);\n    }\n    return {\n      ...defaultOptions,\n      ...options\n    };\n  };\n  const coreInitialState = {};\n  let initialState = {\n    ...coreInitialState,\n    ...((_options$initialState = options.initialState) != null ? _options$initialState : {})\n  };\n  table._features.forEach(feature => {\n    var _feature$getInitialSt;\n    initialState = (_feature$getInitialSt = feature.getInitialState == null ? void 0 : feature.getInitialState(initialState)) != null ? _feature$getInitialSt : initialState;\n  });\n  const queued = [];\n  let queuedTimeout = false;\n  const coreInstance = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb);\n      if (!queuedTimeout) {\n        queuedTimeout = true;\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve().then(() => {\n          while (queued.length) {\n            queued.shift()();\n          }\n          queuedTimeout = false;\n        }).catch(error => setTimeout(() => {\n          throw error;\n        }));\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState);\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options);\n      table.options = mergeOptions(newOptions);\n    },\n    getState: () => {\n      return table.options.state;\n    },\n    setState: updater => {\n      table.options.onStateChange == null || table.options.onStateChange(updater);\n    },\n    _getRowId: (row, index, parent) => {\n      var _table$options$getRow;\n      return (_table$options$getRow = table.options.getRowId == null ? void 0 : table.options.getRowId(row, index, parent)) != null ? _table$options$getRow : `${parent ? [parent.id, index].join('.') : index}`;\n    },\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table);\n      }\n      return table._getCoreRowModel();\n    },\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel();\n    },\n    getRow: id => {\n      const row = table.getRowModel().rowsById[id];\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`);\n        }\n        throw new Error();\n      }\n      return row;\n    },\n    _getDefaultColumnDef: memo(() => [table.options.defaultColumn], defaultColumn => {\n      var _defaultColumn;\n      defaultColumn = (_defaultColumn = defaultColumn) != null ? _defaultColumn : {};\n      return {\n        header: props => {\n          const resolvedColumnDef = props.header.column.columnDef;\n          if (resolvedColumnDef.accessorKey) {\n            return resolvedColumnDef.accessorKey;\n          }\n          if (resolvedColumnDef.accessorFn) {\n            return resolvedColumnDef.id;\n          }\n          return null;\n        },\n        // footer: props => props.header.column.id,\n        cell: props => {\n          var _props$renderValue$to, _props$renderValue;\n          return (_props$renderValue$to = (_props$renderValue = props.renderValue()) == null || _props$renderValue.toString == null ? void 0 : _props$renderValue.toString()) != null ? _props$renderValue$to : null;\n        },\n        ...table._features.reduce((obj, feature) => {\n          return Object.assign(obj, feature.getDefaultColumnDef == null ? void 0 : feature.getDefaultColumnDef());\n        }, {}),\n        ...defaultColumn\n      };\n    }, {\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;\n      },\n      key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef'\n    }),\n    _getColumnDefs: () => table.options.columns,\n    getAllColumns: memo(() => [table._getColumnDefs()], columnDefs => {\n      const recurseColumns = function (columnDefs, parent, depth) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n        return columnDefs.map(columnDef => {\n          const column = createColumn(table, columnDef, depth, parent);\n          const groupingColumnDef = columnDef;\n          column.columns = groupingColumnDef.columns ? recurseColumns(groupingColumnDef.columns, column, depth + 1) : [];\n          return column;\n        });\n      };\n      return recurseColumns(columnDefs);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;\n      }\n    }),\n    getAllFlatColumns: memo(() => [table.getAllColumns()], allColumns => {\n      return allColumns.flatMap(column => {\n        return column.getFlatColumns();\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n      debug: () => {\n        var _table$options$debugA3;\n        return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;\n      }\n    }),\n    _getAllFlatColumnsById: memo(() => [table.getAllFlatColumns()], flatColumns => {\n      return flatColumns.reduce((acc, column) => {\n        acc[column.id] = column;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n      debug: () => {\n        var _table$options$debugA4;\n        return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;\n      }\n    }),\n    getAllLeafColumns: memo(() => [table.getAllColumns(), table._getOrderColumnsFn()], (allColumns, orderColumns) => {\n      let leafColumns = allColumns.flatMap(column => column.getLeafColumns());\n      return orderColumns(leafColumns);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n      debug: () => {\n        var _table$options$debugA5;\n        return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;\n      }\n    }),\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId];\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`);\n      }\n      return column;\n    }\n  };\n  Object.assign(table, coreInstance);\n  for (let index = 0; index < table._features.length; index++) {\n    const feature = table._features[index];\n    feature == null || feature.createTable == null || feature.createTable(table);\n  }\n  return table;\n}\n\nfunction createCell(table, row, column, columnId) {\n  const getRenderValue = () => {\n    var _cell$getValue;\n    return (_cell$getValue = cell.getValue()) != null ? _cell$getValue : table.options.renderFallbackValue;\n  };\n  const cell = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(() => [table, column, row, cell], (table, column, row, cell) => ({\n      table,\n      column,\n      row,\n      cell: cell,\n      getValue: cell.getValue,\n      renderValue: cell.renderValue\n    }), {\n      key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n      debug: () => table.options.debugAll\n    })\n  };\n  table._features.forEach(feature => {\n    feature.createCell == null || feature.createCell(cell, column, row, table);\n  }, {});\n  return cell;\n}\n\nconst createRow = (table, id, original, rowIndex, depth, subRows, parentId) => {\n  let row = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.accessorFn)) {\n        return undefined;\n      }\n      row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex);\n      return row._valuesCache[columnId];\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.accessorFn)) {\n        return undefined;\n      }\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)];\n        return row._uniqueValuesCache[columnId];\n      }\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(row.original, rowIndex);\n      return row._uniqueValuesCache[columnId];\n    },\n    renderValue: columnId => {\n      var _row$getValue;\n      return (_row$getValue = row.getValue(columnId)) != null ? _row$getValue : table.options.renderFallbackValue;\n    },\n    subRows: subRows != null ? subRows : [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => row.parentId ? table.getRow(row.parentId) : undefined,\n    getParentRows: () => {\n      let parentRows = [];\n      let currentRow = row;\n      while (true) {\n        const parentRow = currentRow.getParentRow();\n        if (!parentRow) break;\n        parentRows.push(parentRow);\n        currentRow = parentRow;\n      }\n      return parentRows.reverse();\n    },\n    getAllCells: memo(() => [table.getAllLeafColumns()], leafColumns => {\n      return leafColumns.map(column => {\n        return createCell(table, row, column, column.id);\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n      }\n    }),\n    _getAllCellsByColumnId: memo(() => [row.getAllCells()], allCells => {\n      return allCells.reduce((acc, cell) => {\n        acc[cell.column.id] = cell;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n      }\n    })\n  };\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i];\n    feature == null || feature.createRow == null || feature.createRow(row, table);\n  }\n  return row;\n};\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\nfunction createColumnHelper() {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function' ? {\n        ...column,\n        accessorFn: accessor\n      } : {\n        ...column,\n        accessorKey: accessor\n      };\n    },\n    display: column => column,\n    group: column => column\n  };\n}\n\nfunction getCoreRowModel() {\n  return table => memo(() => [table.options.data], data => {\n    const rowModel = {\n      rows: [],\n      flatRows: [],\n      rowsById: {}\n    };\n    const accessRows = function (originalRows, depth, parentRow) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      const rows = [];\n      for (let i = 0; i < originalRows.length; i++) {\n        // This could be an expensive check at scale, so we should move it somewhere else, but where?\n        // if (!id) {\n        //   if (process.env.NODE_ENV !== 'production') {\n        //     throw new Error(`getRowId expected an ID, but got ${id}`)\n        //   }\n        // }\n\n        // Make the row\n        const row = createRow(table, table._getRowId(originalRows[i], i, parentRow), originalRows[i], i, depth, undefined, parentRow == null ? void 0 : parentRow.id);\n\n        // Keep track of every row in a flat array\n        rowModel.flatRows.push(row);\n        // Also keep track of every row by its ID\n        rowModel.rowsById[row.id] = row;\n        // Push table row into parent\n        rows.push(row);\n\n        // Get the original subrows\n        if (table.options.getSubRows) {\n          var _row$originalSubRows;\n          row.originalSubRows = table.options.getSubRows(originalRows[i], i);\n\n          // Then recursively access them\n          if ((_row$originalSubRows = row.originalSubRows) != null && _row$originalSubRows.length) {\n            row.subRows = accessRows(row.originalSubRows, depth + 1, row);\n          }\n        }\n      }\n      return rows;\n    };\n    rowModel.rows = accessRows(data);\n    return rowModel;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction filterRows(rows, filterRowImpl, table) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table);\n  }\n  return filterRowModelFromRoot(rows, filterRowImpl, table);\n}\nfunction filterRowModelFromLeafs(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea : 100;\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    const rows = [];\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      var _row$subRows;\n      let row = rowsToFilter[i];\n      const newRow = createRow(table, row.id, row.original, row.index, row.depth, undefined, row.parentId);\n      newRow.columnFilters = row.columnFilters;\n      if ((_row$subRows = row.subRows) != null && _row$subRows.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n        row = newRow;\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredFlatRows.push(row);\n          continue;\n        }\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredFlatRows.push(row);\n          continue;\n        }\n      } else {\n        row = newRow;\n        if (filterRow(row)) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredFlatRows.push(row);\n        }\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\nfunction filterRowModelFromRoot(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea2;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea2 = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea2 : 100;\n\n  // Filters top level and nested rows\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    // Filter from parents downward first\n\n    const rows = [];\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i];\n      const pass = filterRow(row);\n      if (pass) {\n        var _row$subRows2;\n        if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length && depth < maxDepth) {\n          const newRow = createRow(table, row.id, row.original, row.index, row.depth, undefined, row.parentId);\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n          row = newRow;\n        }\n        rows.push(row);\n        newFilteredFlatRows.push(row);\n        newFilteredRowsById[row.id] = row;\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\n\nfunction getFilteredRowModel() {\n  return table => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter], (rowModel, columnFilters, globalFilter) => {\n    if (!rowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      for (let i = 0; i < rowModel.flatRows.length; i++) {\n        rowModel.flatRows[i].columnFilters = {};\n        rowModel.flatRows[i].columnFiltersMeta = {};\n      }\n      return rowModel;\n    }\n    const resolvedColumnFilters = [];\n    const resolvedGlobalFilters = [];\n    (columnFilters != null ? columnFilters : []).forEach(d => {\n      var _filterFn$resolveFilt;\n      const column = table.getColumn(d.id);\n      if (!column) {\n        return;\n      }\n      const filterFn = column.getFilterFn();\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`);\n        }\n        return;\n      }\n      resolvedColumnFilters.push({\n        id: d.id,\n        filterFn,\n        resolvedValue: (_filterFn$resolveFilt = filterFn.resolveFilterValue == null ? void 0 : filterFn.resolveFilterValue(d.value)) != null ? _filterFn$resolveFilt : d.value\n      });\n    });\n    const filterableIds = columnFilters.map(d => d.id);\n    const globalFilterFn = table.getGlobalFilterFn();\n    const globallyFilterableColumns = table.getAllLeafColumns().filter(column => column.getCanGlobalFilter());\n    if (globalFilter && globalFilterFn && globallyFilterableColumns.length) {\n      filterableIds.push('__global__');\n      globallyFilterableColumns.forEach(column => {\n        var _globalFilterFn$resol;\n        resolvedGlobalFilters.push({\n          id: column.id,\n          filterFn: globalFilterFn,\n          resolvedValue: (_globalFilterFn$resol = globalFilterFn.resolveFilterValue == null ? void 0 : globalFilterFn.resolveFilterValue(globalFilter)) != null ? _globalFilterFn$resol : globalFilter\n        });\n      });\n    }\n    let currentColumnFilter;\n    let currentGlobalFilter;\n\n    // Flag the prefiltered row model with each filter state\n    for (let j = 0; j < rowModel.flatRows.length; j++) {\n      const row = rowModel.flatRows[j];\n      row.columnFilters = {};\n      if (resolvedColumnFilters.length) {\n        for (let i = 0; i < resolvedColumnFilters.length; i++) {\n          currentColumnFilter = resolvedColumnFilters[i];\n          const id = currentColumnFilter.id;\n\n          // Tag the row with the column filter state\n          row.columnFilters[id] = currentColumnFilter.filterFn(row, id, currentColumnFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          });\n        }\n      }\n      if (resolvedGlobalFilters.length) {\n        for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n          currentGlobalFilter = resolvedGlobalFilters[i];\n          const id = currentGlobalFilter.id;\n          // Tag the row with the first truthy global filter state\n          if (currentGlobalFilter.filterFn(row, id, currentGlobalFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          })) {\n            row.columnFilters.__global__ = true;\n            break;\n          }\n        }\n        if (row.columnFilters.__global__ !== true) {\n          row.columnFilters.__global__ = false;\n        }\n      }\n    }\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    // Filter final rows using all of the active filters\n    return filterRows(rowModel.rows, filterRowsImpl, table);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction getFacetedRowModel() {\n  return (table, columnId) => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter, table.getFilteredRowModel()], (preRowModel, columnFilters, globalFilter) => {\n    if (!preRowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      return preRowModel;\n    }\n    const filterableIds = [...columnFilters.map(d => d.id).filter(d => d !== columnId), globalFilter ? '__global__' : undefined].filter(Boolean);\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return filterRows(preRowModel.rows, filterRowsImpl, table);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedRowModel_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\n\nfunction getFacetedUniqueValues() {\n  return (table, columnId) => memo(() => {\n    var _table$getColumn;\n    return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];\n  }, facetedRowModel => {\n    if (!facetedRowModel) return new Map();\n    let facetedUniqueValues = new Map();\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n      for (let j = 0; j < values.length; j++) {\n        const value = values[j];\n        if (facetedUniqueValues.has(value)) {\n          var _facetedUniqueValues$;\n          facetedUniqueValues.set(value, ((_facetedUniqueValues$ = facetedUniqueValues.get(value)) != null ? _facetedUniqueValues$ : 0) + 1);\n        } else {\n          facetedUniqueValues.set(value, 1);\n        }\n      }\n    }\n    return facetedUniqueValues;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedUniqueValues_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\n\nfunction getFacetedMinMaxValues() {\n  return (table, columnId) => memo(() => {\n    var _table$getColumn;\n    return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];\n  }, facetedRowModel => {\n    var _facetedRowModel$flat;\n    if (!facetedRowModel) return undefined;\n    const firstValue = (_facetedRowModel$flat = facetedRowModel.flatRows[0]) == null ? void 0 : _facetedRowModel$flat.getUniqueValues(columnId);\n    if (typeof firstValue === 'undefined') {\n      return undefined;\n    }\n    let facetedMinMaxValues = [firstValue, firstValue];\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n      for (let j = 0; j < values.length; j++) {\n        const value = values[j];\n        if (value < facetedMinMaxValues[0]) {\n          facetedMinMaxValues[0] = value;\n        } else if (value > facetedMinMaxValues[1]) {\n          facetedMinMaxValues[1] = value;\n        }\n      }\n    }\n    return facetedMinMaxValues;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedMinMaxValues_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\n\nfunction getSortedRowModel() {\n  return table => memo(() => [table.getState().sorting, table.getPreSortedRowModel()], (sorting, rowModel) => {\n    if (!rowModel.rows.length || !(sorting != null && sorting.length)) {\n      return rowModel;\n    }\n    const sortingState = table.getState().sorting;\n    const sortedFlatRows = [];\n\n    // Filter out sortings that correspond to non existing columns\n    const availableSorting = sortingState.filter(sort => {\n      var _table$getColumn;\n      return (_table$getColumn = table.getColumn(sort.id)) == null ? void 0 : _table$getColumn.getCanSort();\n    });\n    const columnInfoById = {};\n    availableSorting.forEach(sortEntry => {\n      const column = table.getColumn(sortEntry.id);\n      if (!column) return;\n      columnInfoById[sortEntry.id] = {\n        sortUndefined: column.columnDef.sortUndefined,\n        invertSorting: column.columnDef.invertSorting,\n        sortingFn: column.getSortingFn()\n      };\n    });\n    const sortData = rows => {\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = [...rows];\n      sortedData.sort((rowA, rowB) => {\n        for (let i = 0; i < availableSorting.length; i += 1) {\n          var _sortEntry$desc;\n          const sortEntry = availableSorting[i];\n          const columnInfo = columnInfoById[sortEntry.id];\n          const isDesc = (_sortEntry$desc = sortEntry == null ? void 0 : sortEntry.desc) != null ? _sortEntry$desc : false;\n          let sortInt = 0;\n\n          // All sorting ints should always return in ascending order\n          if (columnInfo.sortUndefined) {\n            const aValue = rowA.getValue(sortEntry.id);\n            const bValue = rowB.getValue(sortEntry.id);\n            const aUndefined = aValue === undefined;\n            const bUndefined = bValue === undefined;\n            if (aUndefined || bUndefined) {\n              sortInt = aUndefined && bUndefined ? 0 : aUndefined ? columnInfo.sortUndefined : -columnInfo.sortUndefined;\n            }\n          }\n          if (sortInt === 0) {\n            sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id);\n          }\n\n          // If sorting is non-zero, take care of desc and inversion\n          if (sortInt !== 0) {\n            if (isDesc) {\n              sortInt *= -1;\n            }\n            if (columnInfo.invertSorting) {\n              sortInt *= -1;\n            }\n            return sortInt;\n          }\n        }\n        return rowA.index - rowB.index;\n      });\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        var _row$subRows;\n        sortedFlatRows.push(row);\n        if ((_row$subRows = row.subRows) != null && _row$subRows.length) {\n          row.subRows = sortData(row.subRows);\n        }\n      });\n      return sortedData;\n    };\n    return {\n      rows: sortData(rowModel.rows),\n      flatRows: sortedFlatRows,\n      rowsById: rowModel.rowsById\n    };\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction getGroupedRowModel() {\n  return table => memo(() => [table.getState().grouping, table.getPreGroupedRowModel()], (grouping, rowModel) => {\n    if (!rowModel.rows.length || !grouping.length) {\n      return rowModel;\n    }\n\n    // Filter the grouping list down to columns that exist\n    const existingGrouping = grouping.filter(columnId => table.getColumn(columnId));\n    const groupedFlatRows = [];\n    const groupedRowsById = {};\n    // const onlyGroupedFlatRows: Row[] = [];\n    // const onlyGroupedRowsById: Record<RowId, Row> = {};\n    // const nonGroupedFlatRows: Row[] = [];\n    // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n    // Recursively group the data\n    const groupUpRecursively = function (rows, depth, parentId) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      // Grouping depth has been been met\n      // Stop grouping and simply rewrite thd depth and row relationships\n      if (depth >= existingGrouping.length) {\n        return rows.map(row => {\n          row.depth = depth;\n          groupedFlatRows.push(row);\n          groupedRowsById[row.id] = row;\n          if (row.subRows) {\n            row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id);\n          }\n          return row;\n        });\n      }\n      const columnId = existingGrouping[depth];\n\n      // Group the rows together for this level\n      const rowGroupsMap = groupBy(rows, columnId);\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map((_ref, index) => {\n        let [groupingValue, groupedRows] = _ref;\n        let id = `${columnId}:${groupingValue}`;\n        id = parentId ? `${parentId}>${id}` : id;\n\n        // First, Recurse to group sub rows before aggregation\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id);\n\n        // Flatten the leaf rows of the rows in this group\n        const leafRows = depth ? flattenBy(groupedRows, row => row.subRows) : groupedRows;\n        const row = createRow(table, id, leafRows[0].original, index, depth, undefined, parentId);\n        Object.assign(row, {\n          groupingColumnId: columnId,\n          groupingValue,\n          subRows,\n          leafRows,\n          getValue: columnId => {\n            // Don't aggregate columns that are in the grouping\n            if (existingGrouping.includes(columnId)) {\n              if (row._valuesCache.hasOwnProperty(columnId)) {\n                return row._valuesCache[columnId];\n              }\n              if (groupedRows[0]) {\n                var _groupedRows$0$getVal;\n                row._valuesCache[columnId] = (_groupedRows$0$getVal = groupedRows[0].getValue(columnId)) != null ? _groupedRows$0$getVal : undefined;\n              }\n              return row._valuesCache[columnId];\n            }\n            if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n              return row._groupingValuesCache[columnId];\n            }\n\n            // Aggregate the values\n            const column = table.getColumn(columnId);\n            const aggregateFn = column == null ? void 0 : column.getAggregationFn();\n            if (aggregateFn) {\n              row._groupingValuesCache[columnId] = aggregateFn(columnId, leafRows, groupedRows);\n              return row._groupingValuesCache[columnId];\n            }\n          }\n        });\n        subRows.forEach(subRow => {\n          groupedFlatRows.push(subRow);\n          groupedRowsById[subRow.id] = subRow;\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        });\n\n        return row;\n      });\n      return aggregatedGroupedRows;\n    };\n    const groupedRows = groupUpRecursively(rowModel.rows, 0);\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow);\n      groupedRowsById[subRow.id] = subRow;\n      // if (subRow.getIsGrouped?.()) {\n      //   onlyGroupedFlatRows.push(subRow);\n      //   onlyGroupedRowsById[subRow.id] = subRow;\n      // } else {\n      //   nonGroupedFlatRows.push(subRow);\n      //   nonGroupedRowsById[subRow.id] = subRow;\n      // }\n    });\n\n    return {\n      rows: groupedRows,\n      flatRows: groupedFlatRows,\n      rowsById: groupedRowsById\n    };\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._queue(() => {\n        table._autoResetExpanded();\n        table._autoResetPageIndex();\n      });\n    }\n  });\n}\nfunction groupBy(rows, columnId) {\n  const groupMap = new Map();\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`;\n    const previous = map.get(resKey);\n    if (!previous) {\n      map.set(resKey, [row]);\n    } else {\n      previous.push(row);\n    }\n    return map;\n  }, groupMap);\n}\n\nfunction getExpandedRowModel() {\n  return table => memo(() => [table.getState().expanded, table.getPreExpandedRowModel(), table.options.paginateExpandedRows], (expanded, rowModel, paginateExpandedRows) => {\n    if (!rowModel.rows.length || expanded !== true && !Object.keys(expanded != null ? expanded : {}).length) {\n      return rowModel;\n    }\n    if (!paginateExpandedRows) {\n      // Only expand rows at this point if they are being paginated\n      return rowModel;\n    }\n    return expandRows(rowModel);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    }\n  });\n}\nfunction expandRows(rowModel) {\n  const expandedRows = [];\n  const handleRow = row => {\n    var _row$subRows;\n    expandedRows.push(row);\n    if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n  rowModel.rows.forEach(handleRow);\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById\n  };\n}\n\nfunction getPaginationRowModel(opts) {\n  return table => memo(() => [table.getState().pagination, table.getPrePaginationRowModel(), table.options.paginateExpandedRows ? undefined : table.getState().expanded], (pagination, rowModel) => {\n    if (!rowModel.rows.length) {\n      return rowModel;\n    }\n    const {\n      pageSize,\n      pageIndex\n    } = pagination;\n    let {\n      rows,\n      flatRows,\n      rowsById\n    } = rowModel;\n    const pageStart = pageSize * pageIndex;\n    const pageEnd = pageStart + pageSize;\n    rows = rows.slice(pageStart, pageEnd);\n    let paginatedRowModel;\n    if (!table.options.paginateExpandedRows) {\n      paginatedRowModel = expandRows({\n        rows,\n        flatRows,\n        rowsById\n      });\n    } else {\n      paginatedRowModel = {\n        rows,\n        flatRows,\n        rowsById\n      };\n    }\n    paginatedRowModel.flatRows = [];\n    const handleRow = row => {\n      paginatedRowModel.flatRows.push(row);\n      if (row.subRows.length) {\n        row.subRows.forEach(handleRow);\n      }\n    };\n    paginatedRowModel.rows.forEach(handleRow);\n    return paginatedRowModel;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    }\n  });\n}\n\nexport { ColumnSizing, Expanding, Filters, Grouping, Headers, Ordering, Pagination, Pinning, RowSelection, Sorting, Visibility, aggregationFns, buildHeaderGroups, createCell, createColumn, createColumnHelper, createRow, createTable, defaultColumnSizing, expandRows, filterFns, flattenBy, functionalUpdate, getCoreRowModel, getExpandedRowModel, getFacetedMinMaxValues, getFacetedRowModel, getFacetedUniqueValues, getFilteredRowModel, getGroupedRowModel, getPaginationRowModel, getSortedRowModel, isFunction, isNumberArray, isRowSelected, isSubRowSelected, makeStateUpdater, memo, noop, orderColumns, passiveEventSupported, reSplitAlphaNumeric, selectRowsFn, shouldAutoRemoveFilter, sortingFns };\n//# sourceMappingURL=index.mjs.map\n","import * as React from 'react'\nexport * from '@tanstack/table-core'\n\nimport {\n  TableOptions,\n  TableOptionsResolved,\n  RowData,\n  createTable,\n} from '@tanstack/table-core'\n\nexport type Renderable<TProps> = React.ReactNode | React.ComponentType<TProps>\n\n//\n\nexport function flexRender<TProps extends object>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode | JSX.Element {\n  return !Comp ? null : isReactComponent<TProps>(Comp) ? (\n    <Comp {...props} />\n  ) : (\n    Comp\n  )\n}\n\nfunction isReactComponent<TProps>(\n  component: unknown\n): component is React.ComponentType<TProps> {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nexport function useReactTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  // Compose in the generic options to the user options\n  const resolvedOptions: TableOptionsResolved<TData> = {\n    state: {}, // Dummy state\n    onStateChange: () => {}, // noop\n    renderFallbackValue: null,\n    ...options,\n  }\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable<TData>(resolvedOptions),\n  }))\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater)\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return tableRef.current\n}\n"],"names":["functionalUpdate","updater","input","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","isNumberArray","Array","isArray","every","val","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","result","deps","depTime","debug","Date","now","newDeps","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","resolvedColumnDef","_getDefaultColumnDef","accessorKey","accessorFn","id","replace","undefined","header","includes","originalRow","split","_result","Error","column","columns","getFlatColumns","_column$columns","flatMap","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","feature","_features","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","headerGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","bottomHeaders","recurseHeadersForSpans","childRowSpans","childColSpan","childRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","reduce","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","noop","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","autoResetAll","autoResetExpanded","manualExpanding","_queue","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getPrePaginationRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","Object","values","keys","getRowModel","getIsExpanded","getExpandedDepth","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","search","toLowerCase","getValue","toString","autoRemove","testFalsey","includesStringSensitive","_row$getValue2","equalsString","_row$getValue3","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","setFilterValue","setColumnFilters","previousfilter","newFilter","_old$filter","shouldAutoRemoveFilter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","getAllLeafColumns","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","aggregationFns","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","mid","floor","nums","sort","a","b","unique","from","Set","uniqueCount","_columnId","Grouping","aggregatedCell","props","_toString","_props$getValue","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","getGroupingValue","_groupingValuesCache","hasOwnProperty","original","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","Pagination","pagination","pageIndex","pageSize","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","resetPageSize","_table$initialState$p3","_table$initialState2","setPageSize","topRowIndex","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","compareBasic","compareAlphanumeric","aStr","bStr","aa","bb","an","parseInt","bn","combo","sortingFns","alphanumeric","rowA","rowB","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","Sorting","sorting","sortingFn","sortUndefined","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","sortAction","newSorting","nextDesc","_table$options$maxMul","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","cells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","obj","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","_options$initialState","defaultOptions","assign","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","mergeOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","defaultColumn","_defaultColumn","_props$renderValue$to","_props$renderValue","renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","_cell$getValue","renderFallbackValue","rowIndex","parentId","_valuesCache","_uniqueValuesCache","getUniqueValues","getLeafRows","getParentRow","getParentRows","parentRows","currentRow","parentRow","filterRows","filterRowImpl","rowsToFilter","filterRow","_table$options$maxLea","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","filterRowModelFromLeafs","_table$options$maxLea2","filterRowModelFromRoot","expandRows","expandedRows","handleRow","accessor","display","group","Comp","component","proto","getPrototypeOf","isReactComponent","isClassComponent","$$typeof","description","isExoticComponent","React","createElement","data","accessRows","originalRows","_row$originalSubRows","getSubRows","originalSubRows","_table$getColumn","facetedRowModel","_facetedRowModel$flat","firstValue","facetedMinMaxValues","j","preRowModel","filterableIds","facetedUniqueValues","_facetedUniqueValues$","has","set","get","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","_globalFilterFn$resol","filterMeta","__global__","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","rowGroupsMap","groupMap","resKey","previous","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","pageStart","pageEnd","paginatedRowModel","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","sortInt","aUndefined","bUndefined","resolvedOptions","tableRef","useState","current","prev"],"mappings":"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"}