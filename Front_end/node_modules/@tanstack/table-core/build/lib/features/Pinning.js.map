{"version":3,"file":"Pinning.js","sources":["../../../src/features/Pinning.ts"],"sourcesContent":["import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.pin = position => {\n      const columnIds = column\n        .getLeafColumns()\n        .map(d => d.id)\n        .filter(Boolean) as string[]\n\n      table.setColumnPinning(old => {\n        if (position === 'right') {\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: [\n              ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n          }\n        }\n\n        if (position === 'left') {\n          return {\n            left: [\n              ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        }\n\n        return {\n          left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n          right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n        }\n      })\n    }\n\n    column.getCanPin = () => {\n      const leafColumns = column.getLeafColumns()\n\n      return leafColumns.some(\n        d =>\n          (d.columnDef.enablePinning ?? true) &&\n          (table.options.enablePinning ?? true)\n      )\n    }\n\n    column.getIsPinned = () => {\n      const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n      const { left, right } = table.getState().columnPinning\n\n      const isLeft = leafColumnIds.some(d => left?.includes(d))\n      const isRight = leafColumnIds.some(d => right?.includes(d))\n\n      return isLeft ? 'left' : isRight ? 'right' : false\n    }\n\n    column.getPinnedIndex = () => {\n      const position = column.getIsPinned()\n\n      return position\n        ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n        : 0\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.getCenterVisibleCells = memo(\n      () => [\n        row._getAllVisibleCells(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allCells, left, right) => {\n        const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n        return allCells.filter(d => !leftAndRight.includes(d.column.id))\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getCenterVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n    row.getLeftVisibleCells = memo(\n      () => [row._getAllVisibleCells(), table.getState().columnPinning.left, ,],\n      (allCells, left) => {\n        const cells = (left ?? [])\n          .map(columnId => allCells.find(cell => cell.column.id === columnId)!)\n          .filter(Boolean)\n          .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n        return cells\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n    row.getRightVisibleCells = memo(\n      () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n      (allCells, right) => {\n        const cells = (right ?? [])\n          .map(columnId => allCells.find(cell => cell.column.id === columnId)!)\n          .filter(Boolean)\n          .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n        return cells\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnPinning = updater =>\n      table.options.onColumnPinningChange?.(updater)\n\n    table.resetColumnPinning = defaultState =>\n      table.setColumnPinning(\n        defaultState\n          ? getDefaultPinningState()\n          : table.initialState?.columnPinning ?? getDefaultPinningState()\n      )\n\n    table.getIsSomeColumnsPinned = position => {\n      const pinningState = table.getState().columnPinning\n\n      if (!position) {\n        return Boolean(pinningState.left?.length || pinningState.right?.length)\n      }\n      return Boolean(pinningState[position]?.length)\n    }\n\n    table.getLeftLeafColumns = memo(\n      () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n      (allColumns, left) => {\n        return (left ?? [])\n          .map(columnId => allColumns.find(column => column.id === columnId)!)\n          .filter(Boolean)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    )\n\n    table.getRightLeafColumns = memo(\n      () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n      (allColumns, right) => {\n        return (right ?? [])\n          .map(columnId => allColumns.find(column => column.id === columnId)!)\n          .filter(Boolean)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    )\n\n    table.getCenterLeafColumns = memo(\n      () => [\n        table.getAllLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, left, right) => {\n        const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n        return allColumns.filter(d => !leftAndRight.includes(d.id))\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    )\n  },\n}\n"],"names":["getDefaultPinningState","left","right","Pinning","getInitialState","state","columnPinning","getDefaultOptions","table","onColumnPinningChange","makeStateUpdater","createColumn","column","pin","position","columnIds","getLeafColumns","map","d","id","filter","Boolean","setColumnPinning","old","_old$left3","_old$right3","_old$left","_old$right","includes","_old$left2","_old$right2","getCanPin","leafColumns","some","_d$columnDef$enablePi","_table$options$enable","columnDef","enablePinning","options","getIsPinned","leafColumnIds","getState","isLeft","isRight","getPinnedIndex","_table$getState$colum","_table$getState$colum2","indexOf","createRow","row","getCenterVisibleCells","memo","_getAllVisibleCells","allCells","leftAndRight","key","process","env","NODE_ENV","debug","_table$options$debugA","debugAll","debugRows","getLeftVisibleCells","cells","columnId","find","cell","_table$options$debugA2","getRightVisibleCells","_table$options$debugA3","createTable","updater","resetColumnPinning","defaultState","_table$initialState$c","_table$initialState","initialState","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","length","getLeftLeafColumns","getAllLeafColumns","allColumns","_table$options$debugA4","debugColumns","getRightLeafColumns","_table$options$debugA5","getCenterLeafColumns","_table$options$debugA6"],"mappings":"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"}