{"version":3,"file":"index.mjs","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getSortedRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  for (const feature of table._features) {\n    feature.createColumn?.(column, table)\n  }\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    feature.createHeader?.(header, table)\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    // Header Groups\n\n    table.getHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        const leftColumns =\n          left\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        const rightColumns =\n          right\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        const centerColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n\n        const headerGroups = buildHeaderGroups(\n          allColumns,\n          [...leftColumns, ...centerColumns, ...rightColumns],\n          table\n        )\n\n        return headerGroups\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getCenterHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        leafColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n        return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n      ],\n      (allColumns, leafColumns, left) => {\n        const orderedLeafColumns =\n          left\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left')\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, right) => {\n        const orderedLeafColumns =\n          right\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right')\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    // Footer Groups\n\n    table.getFooterGroups = memo(\n      () => [table.getHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftFooterGroups = memo(\n      () => [table.getLeftHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getCenterFooterGroups = memo(\n      () => [table.getCenterHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightFooterGroups = memo(\n      () => [table.getRightHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    // Flat Headers\n\n    table.getFlatHeaders = memo(\n      () => [table.getHeaderGroups()],\n      headerGroups => {\n        return headerGroups\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftFlatHeaders = memo(\n      () => [table.getLeftHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getCenterFlatHeaders = memo(\n      () => [table.getCenterHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightFlatHeaders = memo(\n      () => [table.getRightHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    // Leaf Headers\n\n    table.getCenterLeafHeaders = memo(\n      () => [table.getCenterFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftLeafHeaders = memo(\n      () => [table.getLeftFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightLeafHeaders = memo(\n      () => [table.getRightFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeafHeaders = memo(\n      () => [\n        table.getLeftHeaderGroups(),\n        table.getCenterHeaderGroups(),\n        table.getRightHeaderGroups(),\n      ],\n      (left, center, right) => {\n        return [\n          ...(left[0]?.headers ?? []),\n          ...(center[0]?.headers ?? []),\n          ...(right[0]?.headers ?? []),\n        ]\n          .map(header => {\n            return header.getLeafHeaders()\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.getSize = () => {\n      const columnSize = table.getState().columnSizing[column.id]\n\n      return Math.min(\n        Math.max(\n          column.columnDef.minSize ?? defaultColumnSizing.minSize,\n          columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n        ),\n        column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n      )\n    }\n    column.getStart = position => {\n      const columns = !position\n        ? table.getVisibleLeafColumns()\n        : position === 'left'\n        ? table.getLeftVisibleLeafColumns()\n        : table.getRightVisibleLeafColumns()\n\n      const index = columns.findIndex(d => d.id === column.id)\n\n      if (index > 0) {\n        const prevSiblingColumn = columns[index - 1]!\n\n        return (\n          prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n        )\n      }\n\n      return 0\n    }\n    column.resetSize = () => {\n      table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n        return rest\n      })\n    }\n    column.getCanResize = () => {\n      return (\n        (column.columnDef.enableResizing ?? true) &&\n        (table.options.enableColumnResizing ?? true)\n      )\n    }\n    column.getIsResizing = () => {\n      return table.getState().columnSizingInfo.isResizingColumn === column.id\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    header.getSize = () => {\n      let sum = 0\n\n      const recurse = (header: Header<TData, TValue>) => {\n        if (header.subHeaders.length) {\n          header.subHeaders.forEach(recurse)\n        } else {\n          sum += header.column.getSize() ?? 0\n        }\n      }\n\n      recurse(header)\n\n      return sum\n    }\n    header.getStart = () => {\n      if (header.index > 0) {\n        const prevSiblingHeader = header.headerGroup.headers[header.index - 1]!\n        return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n      }\n\n      return 0\n    }\n    header.getResizeHandler = () => {\n      const column = table.getColumn(header.column.id)\n      const canResize = column?.getCanResize()\n\n      return (e: unknown) => {\n        if (!column || !canResize) {\n          return\n        }\n\n        ;(e as any).persist?.()\n\n        if (isTouchStartEvent(e)) {\n          // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n          if (e.touches && e.touches.length > 1) {\n            return\n          }\n        }\n\n        const startSize = header.getSize()\n\n        const columnSizingStart: [string, number][] = header\n          ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()])\n          : [[column.id, column.getSize()]]\n\n        const clientX = isTouchStartEvent(e)\n          ? Math.round(e.touches[0]!.clientX)\n          : (e as MouseEvent).clientX\n\n        const newColumnSizing: ColumnSizingState = {}\n\n        const updateOffset = (\n          eventType: 'move' | 'end',\n          clientXPos?: number\n        ) => {\n          if (typeof clientXPos !== 'number') {\n            return\n          }\n\n          table.setColumnSizingInfo(old => {\n            const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n            const deltaPercentage = Math.max(\n              deltaOffset / (old?.startSize ?? 0),\n              -0.999999\n            )\n\n            old.columnSizingStart.forEach(([columnId, headerSize]) => {\n              newColumnSizing[columnId] =\n                Math.round(\n                  Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                ) / 100\n            })\n\n            return {\n              ...old,\n              deltaOffset,\n              deltaPercentage,\n            }\n          })\n\n          if (\n            table.options.columnResizeMode === 'onChange' ||\n            eventType === 'end'\n          ) {\n            table.setColumnSizing(old => ({\n              ...old,\n              ...newColumnSizing,\n            }))\n          }\n        }\n\n        const onMove = (clientXPos?: number) => updateOffset('move', clientXPos)\n\n        const onEnd = (clientXPos?: number) => {\n          updateOffset('end', clientXPos)\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            isResizingColumn: false,\n            startOffset: null,\n            startSize: null,\n            deltaOffset: null,\n            deltaPercentage: null,\n            columnSizingStart: [],\n          }))\n        }\n\n        const mouseEvents = {\n          moveHandler: (e: MouseEvent) => onMove(e.clientX),\n          upHandler: (e: MouseEvent) => {\n            document.removeEventListener('mousemove', mouseEvents.moveHandler)\n            document.removeEventListener('mouseup', mouseEvents.upHandler)\n            onEnd(e.clientX)\n          },\n        }\n\n        const touchEvents = {\n          moveHandler: (e: TouchEvent) => {\n            if (e.cancelable) {\n              e.preventDefault()\n              e.stopPropagation()\n            }\n            onMove(e.touches[0]!.clientX)\n            return false\n          },\n          upHandler: (e: TouchEvent) => {\n            document.removeEventListener('touchmove', touchEvents.moveHandler)\n            document.removeEventListener('touchend', touchEvents.upHandler)\n            if (e.cancelable) {\n              e.preventDefault()\n              e.stopPropagation()\n            }\n            onEnd(e.touches[0]?.clientX)\n          },\n        }\n\n        const passiveIfSupported = passiveEventSupported()\n          ? { passive: false }\n          : false\n\n        if (isTouchStartEvent(e)) {\n          document.addEventListener(\n            'touchmove',\n            touchEvents.moveHandler,\n            passiveIfSupported\n          )\n          document.addEventListener(\n            'touchend',\n            touchEvents.upHandler,\n            passiveIfSupported\n          )\n        } else {\n          document.addEventListener(\n            'mousemove',\n            mouseEvents.moveHandler,\n            passiveIfSupported\n          )\n          document.addEventListener(\n            'mouseup',\n            mouseEvents.upHandler,\n            passiveIfSupported\n          )\n        }\n\n        table.setColumnSizingInfo(old => ({\n          ...old,\n          startOffset: clientX,\n          startSize,\n          deltaOffset: 0,\n          deltaPercentage: 0,\n          columnSizingStart,\n          isResizingColumn: column.id,\n        }))\n      }\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnSizing = updater =>\n      table.options.onColumnSizingChange?.(updater)\n    table.setColumnSizingInfo = updater =>\n      table.options.onColumnSizingInfoChange?.(updater)\n    table.resetColumnSizing = defaultState => {\n      table.setColumnSizing(\n        defaultState ? {} : table.initialState.columnSizing ?? {}\n      )\n    }\n    table.resetHeaderSizeInfo = defaultState => {\n      table.setColumnSizingInfo(\n        defaultState\n          ? getDefaultColumnSizingInfoState()\n          : table.initialState.columnSizingInfo ??\n              getDefaultColumnSizingInfoState()\n      )\n    }\n    table.getTotalSize = () =>\n      table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getLeftTotalSize = () =>\n      table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getCenterTotalSize = () =>\n      table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getRightTotalSize = () =>\n      table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    let registered = false\n    let queued = false\n\n    table._autoResetExpanded = () => {\n      if (!registered) {\n        table._queue(() => {\n          registered = true\n        })\n        return\n      }\n\n      if (\n        table.options.autoResetAll ??\n        table.options.autoResetExpanded ??\n        !table.options.manualExpanding\n      ) {\n        if (queued) return\n        queued = true\n        table._queue(() => {\n          table.resetExpanded()\n          queued = false\n        })\n      }\n    }\n    table.setExpanded = updater => table.options.onExpandedChange?.(updater)\n    table.toggleAllRowsExpanded = expanded => {\n      if (expanded ?? !table.getIsAllRowsExpanded()) {\n        table.setExpanded(true)\n      } else {\n        table.setExpanded({})\n      }\n    }\n    table.resetExpanded = defaultState => {\n      table.setExpanded(defaultState ? {} : table.initialState?.expanded ?? {})\n    }\n    table.getCanSomeRowsExpand = () => {\n      return table\n        .getPrePaginationRowModel()\n        .flatRows.some(row => row.getCanExpand())\n    }\n    table.getToggleAllRowsExpandedHandler = () => {\n      return (e: unknown) => {\n        ;(e as any).persist?.()\n        table.toggleAllRowsExpanded()\n      }\n    }\n    table.getIsSomeRowsExpanded = () => {\n      const expanded = table.getState().expanded\n      return expanded === true || Object.values(expanded).some(Boolean)\n    }\n    table.getIsAllRowsExpanded = () => {\n      const expanded = table.getState().expanded\n\n      // If expanded is true, save some cycles and return true\n      if (typeof expanded === 'boolean') {\n        return expanded === true\n      }\n\n      if (!Object.keys(expanded).length) {\n        return false\n      }\n\n      // If any row is not expanded, return false\n      if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n        return false\n      }\n\n      // They must all be expanded :shrug:\n      return true\n    }\n    table.getExpandedDepth = () => {\n      let maxDepth = 0\n\n      const rowIds =\n        table.getState().expanded === true\n          ? Object.keys(table.getRowModel().rowsById)\n          : Object.keys(table.getState().expanded)\n\n      rowIds.forEach(id => {\n        const splitId = id.split('.')\n        maxDepth = Math.max(maxDepth, splitId.length)\n      })\n\n      return maxDepth\n    }\n    table.getPreExpandedRowModel = () => table.getSortedRowModel()\n    table.getExpandedRowModel = () => {\n      if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n        table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n      }\n\n      if (table.options.manualExpanding || !table._getExpandedRowModel) {\n        return table.getPreExpandedRowModel()\n      }\n\n      return table._getExpandedRowModel()\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.toggleExpanded = expanded => {\n      table.setExpanded(old => {\n        const exists = old === true ? true : !!old?.[row.id]\n\n        let oldExpanded: ExpandedStateList = {}\n\n        if (old === true) {\n          Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n            oldExpanded[rowId] = true\n          })\n        } else {\n          oldExpanded = old\n        }\n\n        expanded = expanded ?? !exists\n\n        if (!exists && expanded) {\n          return {\n            ...oldExpanded,\n            [row.id]: true,\n          }\n        }\n\n        if (exists && !expanded) {\n          const { [row.id]: _, ...rest } = oldExpanded\n          return rest\n        }\n\n        return old\n      })\n    }\n    row.getIsExpanded = () => {\n      const expanded = table.getState().expanded\n\n      return !!(\n        table.options.getIsRowExpanded?.(row) ??\n        (expanded === true || expanded?.[row.id])\n      )\n    }\n    row.getCanExpand = () => {\n      return (\n        table.options.getRowCanExpand?.(row) ??\n        ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n      )\n    }\n    row.getToggleExpandedHandler = () => {\n      const canExpand = row.getCanExpand()\n\n      return () => {\n        if (!canExpand) return\n        row.toggleExpanded()\n      }\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): void => {\n    column.getAutoFilterFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'string') {\n        return filterFns.includesString\n      }\n\n      if (typeof value === 'number') {\n        return filterFns.inNumberRange\n      }\n\n      if (typeof value === 'boolean') {\n        return filterFns.equals\n      }\n\n      if (value !== null && typeof value === 'object') {\n        return filterFns.equals\n      }\n\n      if (Array.isArray(value)) {\n        return filterFns.arrIncludes\n      }\n\n      return filterFns.weakEquals\n    }\n    column.getFilterFn = () => {\n      return isFunction(column.columnDef.filterFn)\n        ? column.columnDef.filterFn\n        : column.columnDef.filterFn === 'auto'\n        ? column.getAutoFilterFn()\n        : // @ts-ignore\n          table.options.filterFns?.[column.columnDef.filterFn as string] ??\n          filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n    }\n    column.getCanFilter = () => {\n      return (\n        (column.columnDef.enableColumnFilter ?? true) &&\n        (table.options.enableColumnFilters ?? true) &&\n        (table.options.enableFilters ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getCanGlobalFilter = () => {\n      return (\n        (column.columnDef.enableGlobalFilter ?? true) &&\n        (table.options.enableGlobalFilter ?? true) &&\n        (table.options.enableFilters ?? true) &&\n        (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsFiltered = () => column.getFilterIndex() > -1\n\n    column.getFilterValue = () =>\n      table.getState().columnFilters?.find(d => d.id === column.id)?.value\n\n    column.getFilterIndex = () =>\n      table.getState().columnFilters?.findIndex(d => d.id === column.id) ?? -1\n\n    column.setFilterValue = value => {\n      table.setColumnFilters(old => {\n        const filterFn = column.getFilterFn()\n        const previousfilter = old?.find(d => d.id === column.id)\n\n        const newFilter = functionalUpdate(\n          value,\n          previousfilter ? previousfilter.value : undefined\n        )\n\n        //\n        if (\n          shouldAutoRemoveFilter(filterFn as FilterFn<TData>, newFilter, column)\n        ) {\n          return old?.filter(d => d.id !== column.id) ?? []\n        }\n\n        const newFilterObj = { id: column.id, value: newFilter }\n\n        if (previousfilter) {\n          return (\n            old?.map(d => {\n              if (d.id === column.id) {\n                return newFilterObj\n              }\n              return d\n            }) ?? []\n          )\n        }\n\n        if (old?.length) {\n          return [...old, newFilterObj]\n        }\n\n        return [newFilterObj]\n      })\n    }\n    column._getFacetedRowModel =\n      table.options.getFacetedRowModel &&\n      table.options.getFacetedRowModel(table, column.id)\n    column.getFacetedRowModel = () => {\n      if (!column._getFacetedRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return column._getFacetedRowModel()\n    }\n    column._getFacetedUniqueValues =\n      table.options.getFacetedUniqueValues &&\n      table.options.getFacetedUniqueValues(table, column.id)\n    column.getFacetedUniqueValues = () => {\n      if (!column._getFacetedUniqueValues) {\n        return new Map()\n      }\n\n      return column._getFacetedUniqueValues()\n    }\n    column._getFacetedMinMaxValues =\n      table.options.getFacetedMinMaxValues &&\n      table.options.getFacetedMinMaxValues(table, column.id)\n    column.getFacetedMinMaxValues = () => {\n      if (!column._getFacetedMinMaxValues) {\n        return undefined\n      }\n\n      return column._getFacetedMinMaxValues()\n    }\n    // () => [column.getFacetedRowModel()],\n    // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.columnFilters = {}\n    row.columnFiltersMeta = {}\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.getGlobalAutoFilterFn = () => {\n      return filterFns.includesString\n    }\n\n    table.getGlobalFilterFn = () => {\n      const { globalFilterFn: globalFilterFn } = table.options\n\n      return isFunction(globalFilterFn)\n        ? globalFilterFn\n        : globalFilterFn === 'auto'\n        ? table.getGlobalAutoFilterFn()\n        : // @ts-ignore\n          table.options.filterFns?.[globalFilterFn as string] ??\n          filterFns[globalFilterFn as BuiltInFilterFn]\n    }\n\n    table.setColumnFilters = (updater: Updater<ColumnFiltersState>) => {\n      const leafColumns = table.getAllLeafColumns()\n\n      const updateFn = (old: ColumnFiltersState) => {\n        return functionalUpdate(updater, old)?.filter(filter => {\n          const column = leafColumns.find(d => d.id === filter.id)\n\n          if (column) {\n            const filterFn = column.getFilterFn()\n\n            if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n              return false\n            }\n          }\n\n          return true\n        })\n      }\n\n      table.options.onColumnFiltersChange?.(updateFn)\n    }\n\n    table.setGlobalFilter = updater => {\n      table.options.onGlobalFilterChange?.(updater)\n    }\n\n    table.resetGlobalFilter = defaultState => {\n      table.setGlobalFilter(\n        defaultState ? undefined : table.initialState.globalFilter\n      )\n    }\n\n    table.resetColumnFilters = defaultState => {\n      table.setColumnFilters(\n        defaultState ? [] : table.initialState?.columnFilters ?? []\n      )\n    }\n\n    table.getPreFilteredRowModel = () => table.getCoreRowModel()\n    table.getFilteredRowModel = () => {\n      if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n        table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n      }\n\n      if (table.options.manualFiltering || !table._getFilteredRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return table._getFilteredRowModel()\n    }\n\n    table._getGlobalFacetedRowModel =\n      table.options.getFacetedRowModel &&\n      table.options.getFacetedRowModel(table, '__global__')\n\n    table.getGlobalFacetedRowModel = () => {\n      if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return table._getGlobalFacetedRowModel()\n    }\n\n    table._getGlobalFacetedUniqueValues =\n      table.options.getFacetedUniqueValues &&\n      table.options.getFacetedUniqueValues(table, '__global__')\n    table.getGlobalFacetedUniqueValues = () => {\n      if (!table._getGlobalFacetedUniqueValues) {\n        return new Map()\n      }\n\n      return table._getGlobalFacetedUniqueValues()\n    }\n\n    table._getGlobalFacetedMinMaxValues =\n      table.options.getFacetedMinMaxValues &&\n      table.options.getFacetedMinMaxValues(table, '__global__')\n    table.getGlobalFacetedMinMaxValues = () => {\n      if (!table._getGlobalFacetedMinMaxValues) {\n        return\n      }\n\n      return table._getGlobalFacetedMinMaxValues()\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  getGroupingValue: (columnId: string) => unknown\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.toggleGrouping = () => {\n      table.setGrouping(old => {\n        // Find any existing grouping for this column\n        if (old?.includes(column.id)) {\n          return old.filter(d => d !== column.id)\n        }\n\n        return [...(old ?? []), column.id]\n      })\n    }\n\n    column.getCanGroup = () => {\n      return (\n        column.columnDef.enableGrouping ??\n        true ??\n        table.options.enableGrouping ??\n        true ??\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsGrouped = () => {\n      return table.getState().grouping?.includes(column.id)\n    }\n\n    column.getGroupedIndex = () => table.getState().grouping?.indexOf(column.id)\n\n    column.getToggleGroupingHandler = () => {\n      const canGroup = column.getCanGroup()\n\n      return () => {\n        if (!canGroup) return\n        column.toggleGrouping()\n      }\n    }\n    column.getAutoAggregationFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'number') {\n        return aggregationFns.sum\n      }\n\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return aggregationFns.extent\n      }\n    }\n    column.getAggregationFn = () => {\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.columnDef.aggregationFn)\n        ? column.columnDef.aggregationFn\n        : column.columnDef.aggregationFn === 'auto'\n        ? column.getAutoAggregationFn()\n        : table.options.aggregationFns?.[\n            column.columnDef.aggregationFn as string\n          ] ??\n          aggregationFns[column.columnDef.aggregationFn as BuiltInAggregationFn]\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setGrouping = updater => table.options.onGroupingChange?.(updater)\n\n    table.resetGrouping = defaultState => {\n      table.setGrouping(defaultState ? [] : table.initialState?.grouping ?? [])\n    }\n\n    table.getPreGroupedRowModel = () => table.getFilteredRowModel()\n    table.getGroupedRowModel = () => {\n      if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n        table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n      }\n\n      if (table.options.manualGrouping || !table._getGroupedRowModel) {\n        return table.getPreGroupedRowModel()\n      }\n\n      return table._getGroupedRowModel()\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.getIsGrouped = () => !!row.groupingColumnId\n    row.getGroupingValue = columnId => {\n      if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n        return row._groupingValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.columnDef.getGroupingValue) {\n        return row.getValue(columnId)\n      }\n\n      row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n        row.original\n      )\n\n      return row._groupingValuesCache[columnId]\n    }\n    row._groupingValuesCache = {}\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    cell.getIsGrouped = () =>\n      column.getIsGrouped() && column.id === row.groupingColumnId\n    cell.getIsPlaceholder = () => !cell.getIsGrouped() && column.getIsGrouped()\n    cell.getIsAggregated = () =>\n      !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!row.subRows?.length\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnOrder = updater =>\n      table.options.onColumnOrderChange?.(updater)\n    table.resetColumnOrder = defaultState => {\n      table.setColumnOrder(\n        defaultState ? [] : table.initialState.columnOrder ?? []\n      )\n    }\n    table._getOrderColumnsFn = memo(\n      () => [\n        table.getState().columnOrder,\n        table.getState().grouping,\n        table.options.groupedColumnMode,\n      ],\n      (columnOrder, grouping, groupedColumnMode) => columns => {\n        // Sort grouped columns to the start of the column list\n        // before the headers are built\n        let orderedColumns: Column<TData, unknown>[] = []\n\n        // If there is no order, return the normal columns\n        if (!columnOrder?.length) {\n          orderedColumns = columns\n        } else {\n          const columnOrderCopy = [...columnOrder]\n\n          // If there is an order, make a copy of the columns\n          const columnsCopy = [...columns]\n\n          // And make a new ordered array of the columns\n\n          // Loop over the columns and place them in order into the new array\n          while (columnsCopy.length && columnOrderCopy.length) {\n            const targetColumnId = columnOrderCopy.shift()\n            const foundIndex = columnsCopy.findIndex(\n              d => d.id === targetColumnId\n            )\n            if (foundIndex > -1) {\n              orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n            }\n          }\n\n          // If there are any columns left, add them to the end\n          orderedColumns = [...orderedColumns, ...columnsCopy]\n        }\n\n        return orderColumns(orderedColumns, grouping, groupedColumnMode)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n        // debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    let registered = false\n    let queued = false\n\n    table._autoResetPageIndex = () => {\n      if (!registered) {\n        table._queue(() => {\n          registered = true\n        })\n        return\n      }\n\n      if (\n        table.options.autoResetAll ??\n        table.options.autoResetPageIndex ??\n        !table.options.manualPagination\n      ) {\n        if (queued) return\n        queued = true\n        table._queue(() => {\n          table.resetPageIndex()\n          queued = false\n        })\n      }\n    }\n    table.setPagination = updater => {\n      const safeUpdater: Updater<PaginationState> = old => {\n        let newState = functionalUpdate(updater, old)\n\n        return newState\n      }\n\n      return table.options.onPaginationChange?.(safeUpdater)\n    }\n    table.resetPagination = defaultState => {\n      table.setPagination(\n        defaultState\n          ? getDefaultPaginationState()\n          : table.initialState.pagination ?? getDefaultPaginationState()\n      )\n    }\n    table.setPageIndex = updater => {\n      table.setPagination(old => {\n        let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n        const maxPageIndex =\n          typeof table.options.pageCount === 'undefined' ||\n          table.options.pageCount === -1\n            ? Number.MAX_SAFE_INTEGER\n            : table.options.pageCount - 1\n\n        pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n        return {\n          ...old,\n          pageIndex,\n        }\n      })\n    }\n    table.resetPageIndex = defaultState => {\n      table.setPageIndex(\n        defaultState\n          ? defaultPageIndex\n          : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n      )\n    }\n    table.resetPageSize = defaultState => {\n      table.setPageSize(\n        defaultState\n          ? defaultPageSize\n          : table.initialState?.pagination?.pageSize ?? defaultPageSize\n      )\n    }\n    table.setPageSize = updater => {\n      table.setPagination(old => {\n        const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n        const topRowIndex = old.pageSize * old.pageIndex!\n        const pageIndex = Math.floor(topRowIndex / pageSize)\n\n        return {\n          ...old,\n          pageIndex,\n          pageSize,\n        }\n      })\n    }\n    table.setPageCount = updater =>\n      table.setPagination(old => {\n        let newPageCount = functionalUpdate(\n          updater,\n          table.options.pageCount ?? -1\n        )\n\n        if (typeof newPageCount === 'number') {\n          newPageCount = Math.max(-1, newPageCount)\n        }\n\n        return {\n          ...old,\n          pageCount: newPageCount,\n        }\n      })\n\n    table.getPageOptions = memo(\n      () => [table.getPageCount()],\n      pageCount => {\n        let pageOptions: number[] = []\n        if (pageCount && pageCount > 0) {\n          pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n        }\n        return pageOptions\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n\n    table.getCanPreviousPage = () => table.getState().pagination.pageIndex > 0\n\n    table.getCanNextPage = () => {\n      const { pageIndex } = table.getState().pagination\n\n      const pageCount = table.getPageCount()\n\n      if (pageCount === -1) {\n        return true\n      }\n\n      if (pageCount === 0) {\n        return false\n      }\n\n      return pageIndex < pageCount - 1\n    }\n\n    table.previousPage = () => {\n      return table.setPageIndex(old => old - 1)\n    }\n\n    table.nextPage = () => {\n      return table.setPageIndex(old => {\n        return old + 1\n      })\n    }\n\n    table.getPrePaginationRowModel = () => table.getExpandedRowModel()\n    table.getPaginationRowModel = () => {\n      if (\n        !table._getPaginationRowModel &&\n        table.options.getPaginationRowModel\n      ) {\n        table._getPaginationRowModel =\n          table.options.getPaginationRowModel(table)\n      }\n\n      if (table.options.manualPagination || !table._getPaginationRowModel) {\n        return table.getPrePaginationRowModel()\n      }\n\n      return table._getPaginationRowModel()\n    }\n\n    table.getPageCount = () => {\n      return (\n        table.options.pageCount ??\n        Math.ceil(\n          table.getPrePaginationRowModel().rows.length /\n            table.getState().pagination.pageSize\n        )\n      )\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.pin = position => {\n      const columnIds = column\n        .getLeafColumns()\n        .map(d => d.id)\n        .filter(Boolean) as string[]\n\n      table.setColumnPinning(old => {\n        if (position === 'right') {\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: [\n              ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n          }\n        }\n\n        if (position === 'left') {\n          return {\n            left: [\n              ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        }\n\n        return {\n          left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n          right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n        }\n      })\n    }\n\n    column.getCanPin = () => {\n      const leafColumns = column.getLeafColumns()\n\n      return leafColumns.some(\n        d =>\n          (d.columnDef.enablePinning ?? true) &&\n          (table.options.enablePinning ?? true)\n      )\n    }\n\n    column.getIsPinned = () => {\n      const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n      const { left, right } = table.getState().columnPinning\n\n      const isLeft = leafColumnIds.some(d => left?.includes(d))\n      const isRight = leafColumnIds.some(d => right?.includes(d))\n\n      return isLeft ? 'left' : isRight ? 'right' : false\n    }\n\n    column.getPinnedIndex = () => {\n      const position = column.getIsPinned()\n\n      return position\n        ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n        : 0\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.getCenterVisibleCells = memo(\n      () => [\n        row._getAllVisibleCells(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allCells, left, right) => {\n        const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n        return allCells.filter(d => !leftAndRight.includes(d.column.id))\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getCenterVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n    row.getLeftVisibleCells = memo(\n      () => [row._getAllVisibleCells(), table.getState().columnPinning.left, ,],\n      (allCells, left) => {\n        const cells = (left ?? [])\n          .map(columnId => allCells.find(cell => cell.column.id === columnId)!)\n          .filter(Boolean)\n          .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n        return cells\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n    row.getRightVisibleCells = memo(\n      () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n      (allCells, right) => {\n        const cells = (right ?? [])\n          .map(columnId => allCells.find(cell => cell.column.id === columnId)!)\n          .filter(Boolean)\n          .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n        return cells\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnPinning = updater =>\n      table.options.onColumnPinningChange?.(updater)\n\n    table.resetColumnPinning = defaultState =>\n      table.setColumnPinning(\n        defaultState\n          ? getDefaultPinningState()\n          : table.initialState?.columnPinning ?? getDefaultPinningState()\n      )\n\n    table.getIsSomeColumnsPinned = position => {\n      const pinningState = table.getState().columnPinning\n\n      if (!position) {\n        return Boolean(pinningState.left?.length || pinningState.right?.length)\n      }\n      return Boolean(pinningState[position]?.length)\n    }\n\n    table.getLeftLeafColumns = memo(\n      () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n      (allColumns, left) => {\n        return (left ?? [])\n          .map(columnId => allColumns.find(column => column.id === columnId)!)\n          .filter(Boolean)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    )\n\n    table.getRightLeafColumns = memo(\n      () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n      (allColumns, right) => {\n        return (right ?? [])\n          .map(columnId => allColumns.find(column => column.id === columnId)!)\n          .filter(Boolean)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    )\n\n    table.getCenterLeafColumns = memo(\n      () => [\n        table.getAllLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, left, right) => {\n        const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n        return allColumns.filter(d => !leftAndRight.includes(d.id))\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    )\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setRowSelection = updater =>\n      table.options.onRowSelectionChange?.(updater)\n    table.resetRowSelection = defaultState =>\n      table.setRowSelection(\n        defaultState ? {} : table.initialState.rowSelection ?? {}\n      )\n    table.toggleAllRowsSelected = value => {\n      table.setRowSelection(old => {\n        value =\n          typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n        const rowSelection = { ...old }\n\n        const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n        // We don't use `mutateRowIsSelected` here for performance reasons.\n        // All of the rows are flat already, so it wouldn't be worth it\n        if (value) {\n          preGroupedFlatRows.forEach(row => {\n            if (!row.getCanSelect()) {\n              return\n            }\n            rowSelection[row.id] = true\n          })\n        } else {\n          preGroupedFlatRows.forEach(row => {\n            delete rowSelection[row.id]\n          })\n        }\n\n        return rowSelection\n      })\n    }\n    table.toggleAllPageRowsSelected = value =>\n      table.setRowSelection(old => {\n        const resolvedValue =\n          typeof value !== 'undefined'\n            ? value\n            : !table.getIsAllPageRowsSelected()\n\n        const rowSelection: RowSelectionState = { ...old }\n\n        table.getRowModel().rows.forEach(row => {\n          mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n        })\n\n        return rowSelection\n      })\n\n    // addRowSelectionRange: rowId => {\n    //   const {\n    //     rows,\n    //     rowsById,\n    //     options: { selectGroupingRows, selectSubRows },\n    //   } = table\n\n    //   const findSelectedRow = (rows: Row[]) => {\n    //     let found\n    //     rows.find(d => {\n    //       if (d.getIsSelected()) {\n    //         found = d\n    //         return true\n    //       }\n    //       const subFound = findSelectedRow(d.subRows || [])\n    //       if (subFound) {\n    //         found = subFound\n    //         return true\n    //       }\n    //       return false\n    //     })\n    //     return found\n    //   }\n\n    //   const firstRow = findSelectedRow(rows) || rows[0]\n    //   const lastRow = rowsById[rowId]\n\n    //   let include = false\n    //   const selectedRowIds = {}\n\n    //   const addRow = (row: Row) => {\n    //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n    //       rowsById,\n    //       selectGroupingRows: selectGroupingRows!,\n    //       selectSubRows: selectSubRows!,\n    //     })\n    //   }\n\n    //   table.rows.forEach(row => {\n    //     const isFirstRow = row.id === firstRow.id\n    //     const isLastRow = row.id === lastRow.id\n\n    //     if (isFirstRow || isLastRow) {\n    //       if (!include) {\n    //         include = true\n    //       } else if (include) {\n    //         addRow(row)\n    //         include = false\n    //       }\n    //     }\n\n    //     if (include) {\n    //       addRow(row)\n    //     }\n    //   })\n\n    //   table.setRowSelection(selectedRowIds)\n    // },\n    table.getPreSelectedRowModel = () => table.getCoreRowModel()\n    table.getSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getCoreRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n\n    table.getFilteredSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getFilteredRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' &&\n          'getFilteredSelectedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n\n    table.getGroupedSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getSortedRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'getGroupedSelectedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n\n    ///\n\n    // getGroupingRowCanSelect: rowId => {\n    //   const row = table.getRow(rowId)\n\n    //   if (!row) {\n    //     throw new Error()\n    //   }\n\n    //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n    //     return table.options.enableGroupingRowSelection(row)\n    //   }\n\n    //   return table.options.enableGroupingRowSelection ?? false\n    // },\n\n    table.getIsAllRowsSelected = () => {\n      const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n      const { rowSelection } = table.getState()\n\n      let isAllRowsSelected = Boolean(\n        preGroupedFlatRows.length && Object.keys(rowSelection).length\n      )\n\n      if (isAllRowsSelected) {\n        if (\n          preGroupedFlatRows.some(\n            row => row.getCanSelect() && !rowSelection[row.id]\n          )\n        ) {\n          isAllRowsSelected = false\n        }\n      }\n\n      return isAllRowsSelected\n    }\n\n    table.getIsAllPageRowsSelected = () => {\n      const paginationFlatRows = table\n        .getPaginationRowModel()\n        .flatRows.filter(row => row.getCanSelect())\n      const { rowSelection } = table.getState()\n\n      let isAllPageRowsSelected = !!paginationFlatRows.length\n\n      if (\n        isAllPageRowsSelected &&\n        paginationFlatRows.some(row => !rowSelection[row.id])\n      ) {\n        isAllPageRowsSelected = false\n      }\n\n      return isAllPageRowsSelected\n    }\n\n    table.getIsSomeRowsSelected = () => {\n      const totalSelected = Object.keys(\n        table.getState().rowSelection ?? {}\n      ).length\n      return (\n        totalSelected > 0 &&\n        totalSelected < table.getFilteredRowModel().flatRows.length\n      )\n    }\n\n    table.getIsSomePageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows\n      return table.getIsAllPageRowsSelected()\n        ? false\n        : paginationFlatRows\n            .filter(row => row.getCanSelect())\n            .some(d => d.getIsSelected() || d.getIsSomeSelected())\n    }\n\n    table.getToggleAllRowsSelectedHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllRowsSelected(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n\n    table.getToggleAllPageRowsSelectedHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllPageRowsSelected(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.toggleSelected = value => {\n      const isSelected = row.getIsSelected()\n\n      table.setRowSelection(old => {\n        value = typeof value !== 'undefined' ? value : !isSelected\n\n        if (isSelected === value) {\n          return old\n        }\n\n        const selectedRowIds = { ...old }\n\n        mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n        return selectedRowIds\n      })\n    }\n    row.getIsSelected = () => {\n      const { rowSelection } = table.getState()\n      return isRowSelected(row, rowSelection)\n    }\n\n    row.getIsSomeSelected = () => {\n      const { rowSelection } = table.getState()\n      return isSubRowSelected(row, rowSelection, table) === 'some'\n    }\n\n    row.getIsAllSubRowsSelected = () => {\n      const { rowSelection } = table.getState()\n      return isSubRowSelected(row, rowSelection, table) === 'all'\n    }\n\n    row.getCanSelect = () => {\n      if (typeof table.options.enableRowSelection === 'function') {\n        return table.options.enableRowSelection(row)\n      }\n\n      return table.options.enableRowSelection ?? true\n    }\n\n    row.getCanSelectSubRows = () => {\n      if (typeof table.options.enableSubRowSelection === 'function') {\n        return table.options.enableSubRowSelection(row)\n      }\n\n      return table.options.enableSubRowSelection ?? true\n    }\n\n    row.getCanMultiSelect = () => {\n      if (typeof table.options.enableMultiRowSelection === 'function') {\n        return table.options.enableMultiRowSelection(row)\n      }\n\n      return table.options.enableMultiRowSelection ?? true\n    }\n    row.getToggleSelectedHandler = () => {\n      const canSelect = row.getCanSelect()\n\n      return (e: unknown) => {\n        if (!canSelect) return\n        row.toggleSelected(\n          ((e as MouseEvent).target as HTMLInputElement)?.checked\n        )\n      }\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n      sortUndefined: 1,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.getAutoSortingFn = () => {\n      const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n      let isString = false\n\n      for (const row of firstRows) {\n        const value = row?.getValue(column.id)\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return sortingFns.datetime\n        }\n\n        if (typeof value === 'string') {\n          isString = true\n\n          if (value.split(reSplitAlphaNumeric).length > 1) {\n            return sortingFns.alphanumeric\n          }\n        }\n      }\n\n      if (isString) {\n        return sortingFns.text\n      }\n\n      return sortingFns.basic\n    }\n    column.getAutoSortDir = () => {\n      const firstRow = table.getFilteredRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'string') {\n        return 'asc'\n      }\n\n      return 'desc'\n    }\n    column.getSortingFn = () => {\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.columnDef.sortingFn)\n        ? column.columnDef.sortingFn\n        : column.columnDef.sortingFn === 'auto'\n        ? column.getAutoSortingFn()\n        : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n          sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n    }\n    column.toggleSorting = (desc, multi) => {\n      // if (column.columns.length) {\n      //   column.columns.forEach((c, i) => {\n      //     if (c.id) {\n      //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n      //     }\n      //   })\n      //   return\n      // }\n\n      // this needs to be outside of table.setSorting to be in sync with rerender\n      const nextSortingOrder = column.getNextSortingOrder()\n      const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n      table.setSorting(old => {\n        // Find any existing sorting for this column\n        const existingSorting = old?.find(d => d.id === column.id)\n        const existingIndex = old?.findIndex(d => d.id === column.id)\n\n        let newSorting: SortingState = []\n\n        // What should we do with this sort action?\n        let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n        let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n        // Multi-mode\n        if (old?.length && column.getCanMultiSort() && multi) {\n          if (existingSorting) {\n            sortAction = 'toggle'\n          } else {\n            sortAction = 'add'\n          }\n        } else {\n          // Normal mode\n          if (old?.length && existingIndex !== old.length - 1) {\n            sortAction = 'replace'\n          } else if (existingSorting) {\n            sortAction = 'toggle'\n          } else {\n            sortAction = 'replace'\n          }\n        }\n\n        // Handle toggle states that will remove the sorting\n        if (sortAction === 'toggle') {\n          // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n          if (!hasManualValue) {\n            // Is our intention to remove?\n            if (!nextSortingOrder) {\n              sortAction = 'remove'\n            }\n          }\n        }\n\n        if (sortAction === 'add') {\n          newSorting = [\n            ...old,\n            {\n              id: column.id,\n              desc: nextDesc,\n            },\n          ]\n          // Take latest n columns\n          newSorting.splice(\n            0,\n            newSorting.length -\n              (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n          )\n        } else if (sortAction === 'toggle') {\n          // This flips (or sets) the\n          newSorting = old.map(d => {\n            if (d.id === column.id) {\n              return {\n                ...d,\n                desc: nextDesc,\n              }\n            }\n            return d\n          })\n        } else if (sortAction === 'remove') {\n          newSorting = old.filter(d => d.id !== column.id)\n        } else {\n          newSorting = [\n            {\n              id: column.id,\n              desc: nextDesc,\n            },\n          ]\n        }\n\n        return newSorting\n      })\n    }\n\n    column.getFirstSortDir = () => {\n      const sortDescFirst =\n        column.columnDef.sortDescFirst ??\n        table.options.sortDescFirst ??\n        column.getAutoSortDir() === 'desc'\n      return sortDescFirst ? 'desc' : 'asc'\n    }\n\n    column.getNextSortingOrder = (multi?: boolean) => {\n      const firstSortDirection = column.getFirstSortDir()\n      const isSorted = column.getIsSorted()\n\n      if (!isSorted) {\n        return firstSortDirection\n      }\n\n      if (\n        isSorted !== firstSortDirection &&\n        (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n        (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n      ) {\n        return false\n      }\n      return isSorted === 'desc' ? 'asc' : 'desc'\n    }\n\n    column.getCanSort = () => {\n      return (\n        (column.columnDef.enableSorting ?? true) &&\n        (table.options.enableSorting ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getCanMultiSort = () => {\n      return (\n        column.columnDef.enableMultiSort ??\n        table.options.enableMultiSort ??\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsSorted = () => {\n      const columnSort = table.getState().sorting?.find(d => d.id === column.id)\n\n      return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n    }\n\n    column.getSortIndex = () =>\n      table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1\n\n    column.clearSorting = () => {\n      //clear sorting for just 1 column\n      table.setSorting(old =>\n        old?.length ? old.filter(d => d.id !== column.id) : []\n      )\n    }\n\n    column.getToggleSortingHandler = () => {\n      const canSort = column.getCanSort()\n\n      return (e: unknown) => {\n        if (!canSort) return\n        ;(e as any).persist?.()\n        column.toggleSorting?.(\n          undefined,\n          column.getCanMultiSort() ? table.options.isMultiSortEvent?.(e) : false\n        )\n      }\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setSorting = updater => table.options.onSortingChange?.(updater)\n    table.resetSorting = defaultState => {\n      table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n    }\n    table.getPreSortedRowModel = () => table.getGroupedRowModel()\n    table.getSortedRowModel = () => {\n      if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n        table._getSortedRowModel = table.options.getSortedRowModel(table)\n      }\n\n      if (table.options.manualSorting || !table._getSortedRowModel) {\n        return table.getPreSortedRowModel()\n      }\n\n      return table._getSortedRowModel()\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.toggleVisibility = value => {\n      if (column.getCanHide()) {\n        table.setColumnVisibility(old => ({\n          ...old,\n          [column.id]: value ?? !column.getIsVisible(),\n        }))\n      }\n    }\n    column.getIsVisible = () => {\n      return table.getState().columnVisibility?.[column.id] ?? true\n    }\n\n    column.getCanHide = () => {\n      return (\n        (column.columnDef.enableHiding ?? true) &&\n        (table.options.enableHiding ?? true)\n      )\n    }\n    column.getToggleVisibilityHandler = () => {\n      return (e: unknown) => {\n        column.toggleVisibility?.(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row._getAllVisibleCells = memo(\n      () => [row.getAllCells(), table.getState().columnVisibility],\n      cells => {\n        return cells.filter(cell => cell.column.getIsVisible())\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n    row.getVisibleCells = memo(\n      () => [\n        row.getLeftVisibleCells(),\n        row.getCenterVisibleCells(),\n        row.getRightVisibleCells(),\n      ],\n      (left, center, right) => [...left, ...center, ...right],\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    table.getVisibleFlatColumns = makeVisibleColumnsMethod(\n      'getVisibleFlatColumns',\n      () => table.getAllFlatColumns()\n    )\n    table.getVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getVisibleLeafColumns',\n      () => table.getAllLeafColumns()\n    )\n    table.getLeftVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getLeftVisibleLeafColumns',\n      () => table.getLeftLeafColumns()\n    )\n    table.getRightVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getRightVisibleLeafColumns',\n      () => table.getRightLeafColumns()\n    )\n    table.getCenterVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getCenterVisibleLeafColumns',\n      () => table.getCenterLeafColumns()\n    )\n\n    table.setColumnVisibility = updater =>\n      table.options.onColumnVisibilityChange?.(updater)\n\n    table.resetColumnVisibility = defaultState => {\n      table.setColumnVisibility(\n        defaultState ? {} : table.initialState.columnVisibility ?? {}\n      )\n    }\n\n    table.toggleAllColumnsVisible = value => {\n      value = value ?? !table.getIsAllColumnsVisible()\n\n      table.setColumnVisibility(\n        table.getAllLeafColumns().reduce(\n          (obj, column) => ({\n            ...obj,\n            [column.id]: !value ? !column.getCanHide?.() : value,\n          }),\n          {}\n        )\n      )\n    }\n\n    table.getIsAllColumnsVisible = () =>\n      !table.getAllLeafColumns().some(column => !column.getIsVisible?.())\n\n    table.getIsSomeColumnsVisible = () =>\n      table.getAllLeafColumns().some(column => column.getIsVisible?.())\n\n    table.getToggleAllColumnsVisibilityHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllColumnsVisible(\n          ((e as MouseEvent).target as HTMLInputElement)?.checked\n        )\n      }\n    }\n  },\n}\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  for (let index = 0; index < table._features.length; index++) {\n    const feature = table._features[index]\n    feature?.createTable?.(table)\n  }\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    feature.createCell?.(\n      cell as Cell<TData, TValue>,\n      column,\n      row as Row<TData>,\n      table\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    feature?.createRow?.(row, table)\n  }\n\n  return row as Row<TData>\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              let sortInt = 0\n\n              // All sorting ints should always return in ascending order\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = aValue === undefined\n                const bUndefined = bValue === undefined\n\n                if (aUndefined || bUndefined) {\n                  sortInt =\n                    aUndefined && bUndefined\n                      ? 0\n                      : aUndefined\n                      ? columnInfo.sortUndefined\n                      : -columnInfo.sortUndefined\n                }\n              }\n\n              if (sortInt === 0) {\n                sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n              }\n\n              // If sorting is non-zero, take care of desc and inversion\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","isNumberArray","Array","isArray","every","val","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","replace","undefined","header","accessorFn","includes","originalRow","split","_result","process","env","NODE_ENV","warn","Error","column","columns","getFlatColumns","_column$columns","flatMap","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","feature","_features","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","orderedLeafColumns","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","reduce","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","_queue","autoResetAll","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getPrePaginationRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","Object","values","keys","getRowModel","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","search","toLowerCase","getValue","toString","autoRemove","testFalsey","includesStringSensitive","_row$getValue2","equalsString","_row$getValue3","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","_old$filter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","getAllLeafColumns","updateFn","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","mid","floor","nums","sort","a","b","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","props","_toString","_props$getValue","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","getGroupingValue","_groupingValuesCache","hasOwnProperty","original","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","resetPageSize","_table$initialState$p3","_table$initialState2","setPageSize","topRowIndex","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sortingFns","Sorting","sorting","sortingFn","sortUndefined","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","_table$options$maxMul","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","obj","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","_options$initialState","defaultOptions","assign","mergeOptions","coreInitialState","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","_defaultColumn","_props$renderValue$to","_props$renderValue","renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","getRenderValue","_cell$getValue","renderFallbackValue","rowIndex","parentId","_valuesCache","_uniqueValuesCache","getUniqueValues","getLeafRows","getParentRow","getParentRows","parentRows","currentRow","parentRow","createColumnHelper","accessor","display","group","data","accessRows","originalRows","getSubRows","_row$originalSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","_table$options$maxLea","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","_table$options$maxLea2","pass","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","filterableIds","globallyFilterableColumns","_globalFilterFn$resol","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","_table$getColumn","facetedRowModel","facetedUniqueValues","has","_facetedUniqueValues$","set","get","_facetedRowModel$flat","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","sortInt","aValue","bValue","aUndefined","bUndefined","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd","paginatedRowModel"],"mappings":"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"}