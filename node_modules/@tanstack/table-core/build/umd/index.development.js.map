{"version":3,"file":"index.development.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getSortedRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  for (const feature of table._features) {\n    feature.createColumn?.(column, table)\n  }\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    feature.createHeader?.(header, table)\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    // Header Groups\n\n    table.getHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        const leftColumns =\n          left\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        const rightColumns =\n          right\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        const centerColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n\n        const headerGroups = buildHeaderGroups(\n          allColumns,\n          [...leftColumns, ...centerColumns, ...rightColumns],\n          table\n        )\n\n        return headerGroups\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getCenterHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        leafColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n        return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n      ],\n      (allColumns, leafColumns, left) => {\n        const orderedLeafColumns =\n          left\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left')\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, right) => {\n        const orderedLeafColumns =\n          right\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right')\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    // Footer Groups\n\n    table.getFooterGroups = memo(\n      () => [table.getHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftFooterGroups = memo(\n      () => [table.getLeftHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getCenterFooterGroups = memo(\n      () => [table.getCenterHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightFooterGroups = memo(\n      () => [table.getRightHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    // Flat Headers\n\n    table.getFlatHeaders = memo(\n      () => [table.getHeaderGroups()],\n      headerGroups => {\n        return headerGroups\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftFlatHeaders = memo(\n      () => [table.getLeftHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getCenterFlatHeaders = memo(\n      () => [table.getCenterHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightFlatHeaders = memo(\n      () => [table.getRightHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    // Leaf Headers\n\n    table.getCenterLeafHeaders = memo(\n      () => [table.getCenterFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftLeafHeaders = memo(\n      () => [table.getLeftFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightLeafHeaders = memo(\n      () => [table.getRightFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeafHeaders = memo(\n      () => [\n        table.getLeftHeaderGroups(),\n        table.getCenterHeaderGroups(),\n        table.getRightHeaderGroups(),\n      ],\n      (left, center, right) => {\n        return [\n          ...(left[0]?.headers ?? []),\n          ...(center[0]?.headers ?? []),\n          ...(right[0]?.headers ?? []),\n        ]\n          .map(header => {\n            return header.getLeafHeaders()\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.getSize = () => {\n      const columnSize = table.getState().columnSizing[column.id]\n\n      return Math.min(\n        Math.max(\n          column.columnDef.minSize ?? defaultColumnSizing.minSize,\n          columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n        ),\n        column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n      )\n    }\n    column.getStart = position => {\n      const columns = !position\n        ? table.getVisibleLeafColumns()\n        : position === 'left'\n        ? table.getLeftVisibleLeafColumns()\n        : table.getRightVisibleLeafColumns()\n\n      const index = columns.findIndex(d => d.id === column.id)\n\n      if (index > 0) {\n        const prevSiblingColumn = columns[index - 1]!\n\n        return (\n          prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n        )\n      }\n\n      return 0\n    }\n    column.resetSize = () => {\n      table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n        return rest\n      })\n    }\n    column.getCanResize = () => {\n      return (\n        (column.columnDef.enableResizing ?? true) &&\n        (table.options.enableColumnResizing ?? true)\n      )\n    }\n    column.getIsResizing = () => {\n      return table.getState().columnSizingInfo.isResizingColumn === column.id\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    header.getSize = () => {\n      let sum = 0\n\n      const recurse = (header: Header<TData, TValue>) => {\n        if (header.subHeaders.length) {\n          header.subHeaders.forEach(recurse)\n        } else {\n          sum += header.column.getSize() ?? 0\n        }\n      }\n\n      recurse(header)\n\n      return sum\n    }\n    header.getStart = () => {\n      if (header.index > 0) {\n        const prevSiblingHeader = header.headerGroup.headers[header.index - 1]!\n        return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n      }\n\n      return 0\n    }\n    header.getResizeHandler = () => {\n      const column = table.getColumn(header.column.id)\n      const canResize = column?.getCanResize()\n\n      return (e: unknown) => {\n        if (!column || !canResize) {\n          return\n        }\n\n        ;(e as any).persist?.()\n\n        if (isTouchStartEvent(e)) {\n          // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n          if (e.touches && e.touches.length > 1) {\n            return\n          }\n        }\n\n        const startSize = header.getSize()\n\n        const columnSizingStart: [string, number][] = header\n          ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()])\n          : [[column.id, column.getSize()]]\n\n        const clientX = isTouchStartEvent(e)\n          ? Math.round(e.touches[0]!.clientX)\n          : (e as MouseEvent).clientX\n\n        const newColumnSizing: ColumnSizingState = {}\n\n        const updateOffset = (\n          eventType: 'move' | 'end',\n          clientXPos?: number\n        ) => {\n          if (typeof clientXPos !== 'number') {\n            return\n          }\n\n          table.setColumnSizingInfo(old => {\n            const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n            const deltaPercentage = Math.max(\n              deltaOffset / (old?.startSize ?? 0),\n              -0.999999\n            )\n\n            old.columnSizingStart.forEach(([columnId, headerSize]) => {\n              newColumnSizing[columnId] =\n                Math.round(\n                  Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                ) / 100\n            })\n\n            return {\n              ...old,\n              deltaOffset,\n              deltaPercentage,\n            }\n          })\n\n          if (\n            table.options.columnResizeMode === 'onChange' ||\n            eventType === 'end'\n          ) {\n            table.setColumnSizing(old => ({\n              ...old,\n              ...newColumnSizing,\n            }))\n          }\n        }\n\n        const onMove = (clientXPos?: number) => updateOffset('move', clientXPos)\n\n        const onEnd = (clientXPos?: number) => {\n          updateOffset('end', clientXPos)\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            isResizingColumn: false,\n            startOffset: null,\n            startSize: null,\n            deltaOffset: null,\n            deltaPercentage: null,\n            columnSizingStart: [],\n          }))\n        }\n\n        const mouseEvents = {\n          moveHandler: (e: MouseEvent) => onMove(e.clientX),\n          upHandler: (e: MouseEvent) => {\n            document.removeEventListener('mousemove', mouseEvents.moveHandler)\n            document.removeEventListener('mouseup', mouseEvents.upHandler)\n            onEnd(e.clientX)\n          },\n        }\n\n        const touchEvents = {\n          moveHandler: (e: TouchEvent) => {\n            if (e.cancelable) {\n              e.preventDefault()\n              e.stopPropagation()\n            }\n            onMove(e.touches[0]!.clientX)\n            return false\n          },\n          upHandler: (e: TouchEvent) => {\n            document.removeEventListener('touchmove', touchEvents.moveHandler)\n            document.removeEventListener('touchend', touchEvents.upHandler)\n            if (e.cancelable) {\n              e.preventDefault()\n              e.stopPropagation()\n            }\n            onEnd(e.touches[0]?.clientX)\n          },\n        }\n\n        const passiveIfSupported = passiveEventSupported()\n          ? { passive: false }\n          : false\n\n        if (isTouchStartEvent(e)) {\n          document.addEventListener(\n            'touchmove',\n            touchEvents.moveHandler,\n            passiveIfSupported\n          )\n          document.addEventListener(\n            'touchend',\n            touchEvents.upHandler,\n            passiveIfSupported\n          )\n        } else {\n          document.addEventListener(\n            'mousemove',\n            mouseEvents.moveHandler,\n            passiveIfSupported\n          )\n          document.addEventListener(\n            'mouseup',\n            mouseEvents.upHandler,\n            passiveIfSupported\n          )\n        }\n\n        table.setColumnSizingInfo(old => ({\n          ...old,\n          startOffset: clientX,\n          startSize,\n          deltaOffset: 0,\n          deltaPercentage: 0,\n          columnSizingStart,\n          isResizingColumn: column.id,\n        }))\n      }\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnSizing = updater =>\n      table.options.onColumnSizingChange?.(updater)\n    table.setColumnSizingInfo = updater =>\n      table.options.onColumnSizingInfoChange?.(updater)\n    table.resetColumnSizing = defaultState => {\n      table.setColumnSizing(\n        defaultState ? {} : table.initialState.columnSizing ?? {}\n      )\n    }\n    table.resetHeaderSizeInfo = defaultState => {\n      table.setColumnSizingInfo(\n        defaultState\n          ? getDefaultColumnSizingInfoState()\n          : table.initialState.columnSizingInfo ??\n              getDefaultColumnSizingInfoState()\n      )\n    }\n    table.getTotalSize = () =>\n      table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getLeftTotalSize = () =>\n      table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getCenterTotalSize = () =>\n      table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getRightTotalSize = () =>\n      table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    let registered = false\n    let queued = false\n\n    table._autoResetExpanded = () => {\n      if (!registered) {\n        table._queue(() => {\n          registered = true\n        })\n        return\n      }\n\n      if (\n        table.options.autoResetAll ??\n        table.options.autoResetExpanded ??\n        !table.options.manualExpanding\n      ) {\n        if (queued) return\n        queued = true\n        table._queue(() => {\n          table.resetExpanded()\n          queued = false\n        })\n      }\n    }\n    table.setExpanded = updater => table.options.onExpandedChange?.(updater)\n    table.toggleAllRowsExpanded = expanded => {\n      if (expanded ?? !table.getIsAllRowsExpanded()) {\n        table.setExpanded(true)\n      } else {\n        table.setExpanded({})\n      }\n    }\n    table.resetExpanded = defaultState => {\n      table.setExpanded(defaultState ? {} : table.initialState?.expanded ?? {})\n    }\n    table.getCanSomeRowsExpand = () => {\n      return table\n        .getPrePaginationRowModel()\n        .flatRows.some(row => row.getCanExpand())\n    }\n    table.getToggleAllRowsExpandedHandler = () => {\n      return (e: unknown) => {\n        ;(e as any).persist?.()\n        table.toggleAllRowsExpanded()\n      }\n    }\n    table.getIsSomeRowsExpanded = () => {\n      const expanded = table.getState().expanded\n      return expanded === true || Object.values(expanded).some(Boolean)\n    }\n    table.getIsAllRowsExpanded = () => {\n      const expanded = table.getState().expanded\n\n      // If expanded is true, save some cycles and return true\n      if (typeof expanded === 'boolean') {\n        return expanded === true\n      }\n\n      if (!Object.keys(expanded).length) {\n        return false\n      }\n\n      // If any row is not expanded, return false\n      if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n        return false\n      }\n\n      // They must all be expanded :shrug:\n      return true\n    }\n    table.getExpandedDepth = () => {\n      let maxDepth = 0\n\n      const rowIds =\n        table.getState().expanded === true\n          ? Object.keys(table.getRowModel().rowsById)\n          : Object.keys(table.getState().expanded)\n\n      rowIds.forEach(id => {\n        const splitId = id.split('.')\n        maxDepth = Math.max(maxDepth, splitId.length)\n      })\n\n      return maxDepth\n    }\n    table.getPreExpandedRowModel = () => table.getSortedRowModel()\n    table.getExpandedRowModel = () => {\n      if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n        table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n      }\n\n      if (table.options.manualExpanding || !table._getExpandedRowModel) {\n        return table.getPreExpandedRowModel()\n      }\n\n      return table._getExpandedRowModel()\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.toggleExpanded = expanded => {\n      table.setExpanded(old => {\n        const exists = old === true ? true : !!old?.[row.id]\n\n        let oldExpanded: ExpandedStateList = {}\n\n        if (old === true) {\n          Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n            oldExpanded[rowId] = true\n          })\n        } else {\n          oldExpanded = old\n        }\n\n        expanded = expanded ?? !exists\n\n        if (!exists && expanded) {\n          return {\n            ...oldExpanded,\n            [row.id]: true,\n          }\n        }\n\n        if (exists && !expanded) {\n          const { [row.id]: _, ...rest } = oldExpanded\n          return rest\n        }\n\n        return old\n      })\n    }\n    row.getIsExpanded = () => {\n      const expanded = table.getState().expanded\n\n      return !!(\n        table.options.getIsRowExpanded?.(row) ??\n        (expanded === true || expanded?.[row.id])\n      )\n    }\n    row.getCanExpand = () => {\n      return (\n        table.options.getRowCanExpand?.(row) ??\n        ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n      )\n    }\n    row.getToggleExpandedHandler = () => {\n      const canExpand = row.getCanExpand()\n\n      return () => {\n        if (!canExpand) return\n        row.toggleExpanded()\n      }\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): void => {\n    column.getAutoFilterFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'string') {\n        return filterFns.includesString\n      }\n\n      if (typeof value === 'number') {\n        return filterFns.inNumberRange\n      }\n\n      if (typeof value === 'boolean') {\n        return filterFns.equals\n      }\n\n      if (value !== null && typeof value === 'object') {\n        return filterFns.equals\n      }\n\n      if (Array.isArray(value)) {\n        return filterFns.arrIncludes\n      }\n\n      return filterFns.weakEquals\n    }\n    column.getFilterFn = () => {\n      return isFunction(column.columnDef.filterFn)\n        ? column.columnDef.filterFn\n        : column.columnDef.filterFn === 'auto'\n        ? column.getAutoFilterFn()\n        : // @ts-ignore\n          table.options.filterFns?.[column.columnDef.filterFn as string] ??\n          filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n    }\n    column.getCanFilter = () => {\n      return (\n        (column.columnDef.enableColumnFilter ?? true) &&\n        (table.options.enableColumnFilters ?? true) &&\n        (table.options.enableFilters ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getCanGlobalFilter = () => {\n      return (\n        (column.columnDef.enableGlobalFilter ?? true) &&\n        (table.options.enableGlobalFilter ?? true) &&\n        (table.options.enableFilters ?? true) &&\n        (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsFiltered = () => column.getFilterIndex() > -1\n\n    column.getFilterValue = () =>\n      table.getState().columnFilters?.find(d => d.id === column.id)?.value\n\n    column.getFilterIndex = () =>\n      table.getState().columnFilters?.findIndex(d => d.id === column.id) ?? -1\n\n    column.setFilterValue = value => {\n      table.setColumnFilters(old => {\n        const filterFn = column.getFilterFn()\n        const previousfilter = old?.find(d => d.id === column.id)\n\n        const newFilter = functionalUpdate(\n          value,\n          previousfilter ? previousfilter.value : undefined\n        )\n\n        //\n        if (\n          shouldAutoRemoveFilter(filterFn as FilterFn<TData>, newFilter, column)\n        ) {\n          return old?.filter(d => d.id !== column.id) ?? []\n        }\n\n        const newFilterObj = { id: column.id, value: newFilter }\n\n        if (previousfilter) {\n          return (\n            old?.map(d => {\n              if (d.id === column.id) {\n                return newFilterObj\n              }\n              return d\n            }) ?? []\n          )\n        }\n\n        if (old?.length) {\n          return [...old, newFilterObj]\n        }\n\n        return [newFilterObj]\n      })\n    }\n    column._getFacetedRowModel =\n      table.options.getFacetedRowModel &&\n      table.options.getFacetedRowModel(table, column.id)\n    column.getFacetedRowModel = () => {\n      if (!column._getFacetedRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return column._getFacetedRowModel()\n    }\n    column._getFacetedUniqueValues =\n      table.options.getFacetedUniqueValues &&\n      table.options.getFacetedUniqueValues(table, column.id)\n    column.getFacetedUniqueValues = () => {\n      if (!column._getFacetedUniqueValues) {\n        return new Map()\n      }\n\n      return column._getFacetedUniqueValues()\n    }\n    column._getFacetedMinMaxValues =\n      table.options.getFacetedMinMaxValues &&\n      table.options.getFacetedMinMaxValues(table, column.id)\n    column.getFacetedMinMaxValues = () => {\n      if (!column._getFacetedMinMaxValues) {\n        return undefined\n      }\n\n      return column._getFacetedMinMaxValues()\n    }\n    // () => [column.getFacetedRowModel()],\n    // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.columnFilters = {}\n    row.columnFiltersMeta = {}\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.getGlobalAutoFilterFn = () => {\n      return filterFns.includesString\n    }\n\n    table.getGlobalFilterFn = () => {\n      const { globalFilterFn: globalFilterFn } = table.options\n\n      return isFunction(globalFilterFn)\n        ? globalFilterFn\n        : globalFilterFn === 'auto'\n        ? table.getGlobalAutoFilterFn()\n        : // @ts-ignore\n          table.options.filterFns?.[globalFilterFn as string] ??\n          filterFns[globalFilterFn as BuiltInFilterFn]\n    }\n\n    table.setColumnFilters = (updater: Updater<ColumnFiltersState>) => {\n      const leafColumns = table.getAllLeafColumns()\n\n      const updateFn = (old: ColumnFiltersState) => {\n        return functionalUpdate(updater, old)?.filter(filter => {\n          const column = leafColumns.find(d => d.id === filter.id)\n\n          if (column) {\n            const filterFn = column.getFilterFn()\n\n            if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n              return false\n            }\n          }\n\n          return true\n        })\n      }\n\n      table.options.onColumnFiltersChange?.(updateFn)\n    }\n\n    table.setGlobalFilter = updater => {\n      table.options.onGlobalFilterChange?.(updater)\n    }\n\n    table.resetGlobalFilter = defaultState => {\n      table.setGlobalFilter(\n        defaultState ? undefined : table.initialState.globalFilter\n      )\n    }\n\n    table.resetColumnFilters = defaultState => {\n      table.setColumnFilters(\n        defaultState ? [] : table.initialState?.columnFilters ?? []\n      )\n    }\n\n    table.getPreFilteredRowModel = () => table.getCoreRowModel()\n    table.getFilteredRowModel = () => {\n      if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n        table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n      }\n\n      if (table.options.manualFiltering || !table._getFilteredRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return table._getFilteredRowModel()\n    }\n\n    table._getGlobalFacetedRowModel =\n      table.options.getFacetedRowModel &&\n      table.options.getFacetedRowModel(table, '__global__')\n\n    table.getGlobalFacetedRowModel = () => {\n      if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return table._getGlobalFacetedRowModel()\n    }\n\n    table._getGlobalFacetedUniqueValues =\n      table.options.getFacetedUniqueValues &&\n      table.options.getFacetedUniqueValues(table, '__global__')\n    table.getGlobalFacetedUniqueValues = () => {\n      if (!table._getGlobalFacetedUniqueValues) {\n        return new Map()\n      }\n\n      return table._getGlobalFacetedUniqueValues()\n    }\n\n    table._getGlobalFacetedMinMaxValues =\n      table.options.getFacetedMinMaxValues &&\n      table.options.getFacetedMinMaxValues(table, '__global__')\n    table.getGlobalFacetedMinMaxValues = () => {\n      if (!table._getGlobalFacetedMinMaxValues) {\n        return\n      }\n\n      return table._getGlobalFacetedMinMaxValues()\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  getGroupingValue: (columnId: string) => unknown\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.toggleGrouping = () => {\n      table.setGrouping(old => {\n        // Find any existing grouping for this column\n        if (old?.includes(column.id)) {\n          return old.filter(d => d !== column.id)\n        }\n\n        return [...(old ?? []), column.id]\n      })\n    }\n\n    column.getCanGroup = () => {\n      return (\n        column.columnDef.enableGrouping ??\n        true ??\n        table.options.enableGrouping ??\n        true ??\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsGrouped = () => {\n      return table.getState().grouping?.includes(column.id)\n    }\n\n    column.getGroupedIndex = () => table.getState().grouping?.indexOf(column.id)\n\n    column.getToggleGroupingHandler = () => {\n      const canGroup = column.getCanGroup()\n\n      return () => {\n        if (!canGroup) return\n        column.toggleGrouping()\n      }\n    }\n    column.getAutoAggregationFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'number') {\n        return aggregationFns.sum\n      }\n\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return aggregationFns.extent\n      }\n    }\n    column.getAggregationFn = () => {\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.columnDef.aggregationFn)\n        ? column.columnDef.aggregationFn\n        : column.columnDef.aggregationFn === 'auto'\n        ? column.getAutoAggregationFn()\n        : table.options.aggregationFns?.[\n            column.columnDef.aggregationFn as string\n          ] ??\n          aggregationFns[column.columnDef.aggregationFn as BuiltInAggregationFn]\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setGrouping = updater => table.options.onGroupingChange?.(updater)\n\n    table.resetGrouping = defaultState => {\n      table.setGrouping(defaultState ? [] : table.initialState?.grouping ?? [])\n    }\n\n    table.getPreGroupedRowModel = () => table.getFilteredRowModel()\n    table.getGroupedRowModel = () => {\n      if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n        table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n      }\n\n      if (table.options.manualGrouping || !table._getGroupedRowModel) {\n        return table.getPreGroupedRowModel()\n      }\n\n      return table._getGroupedRowModel()\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.getIsGrouped = () => !!row.groupingColumnId\n    row.getGroupingValue = columnId => {\n      if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n        return row._groupingValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.columnDef.getGroupingValue) {\n        return row.getValue(columnId)\n      }\n\n      row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n        row.original\n      )\n\n      return row._groupingValuesCache[columnId]\n    }\n    row._groupingValuesCache = {}\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    cell.getIsGrouped = () =>\n      column.getIsGrouped() && column.id === row.groupingColumnId\n    cell.getIsPlaceholder = () => !cell.getIsGrouped() && column.getIsGrouped()\n    cell.getIsAggregated = () =>\n      !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!row.subRows?.length\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnOrder = updater =>\n      table.options.onColumnOrderChange?.(updater)\n    table.resetColumnOrder = defaultState => {\n      table.setColumnOrder(\n        defaultState ? [] : table.initialState.columnOrder ?? []\n      )\n    }\n    table._getOrderColumnsFn = memo(\n      () => [\n        table.getState().columnOrder,\n        table.getState().grouping,\n        table.options.groupedColumnMode,\n      ],\n      (columnOrder, grouping, groupedColumnMode) => columns => {\n        // Sort grouped columns to the start of the column list\n        // before the headers are built\n        let orderedColumns: Column<TData, unknown>[] = []\n\n        // If there is no order, return the normal columns\n        if (!columnOrder?.length) {\n          orderedColumns = columns\n        } else {\n          const columnOrderCopy = [...columnOrder]\n\n          // If there is an order, make a copy of the columns\n          const columnsCopy = [...columns]\n\n          // And make a new ordered array of the columns\n\n          // Loop over the columns and place them in order into the new array\n          while (columnsCopy.length && columnOrderCopy.length) {\n            const targetColumnId = columnOrderCopy.shift()\n            const foundIndex = columnsCopy.findIndex(\n              d => d.id === targetColumnId\n            )\n            if (foundIndex > -1) {\n              orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n            }\n          }\n\n          // If there are any columns left, add them to the end\n          orderedColumns = [...orderedColumns, ...columnsCopy]\n        }\n\n        return orderColumns(orderedColumns, grouping, groupedColumnMode)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n        // debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    let registered = false\n    let queued = false\n\n    table._autoResetPageIndex = () => {\n      if (!registered) {\n        table._queue(() => {\n          registered = true\n        })\n        return\n      }\n\n      if (\n        table.options.autoResetAll ??\n        table.options.autoResetPageIndex ??\n        !table.options.manualPagination\n      ) {\n        if (queued) return\n        queued = true\n        table._queue(() => {\n          table.resetPageIndex()\n          queued = false\n        })\n      }\n    }\n    table.setPagination = updater => {\n      const safeUpdater: Updater<PaginationState> = old => {\n        let newState = functionalUpdate(updater, old)\n\n        return newState\n      }\n\n      return table.options.onPaginationChange?.(safeUpdater)\n    }\n    table.resetPagination = defaultState => {\n      table.setPagination(\n        defaultState\n          ? getDefaultPaginationState()\n          : table.initialState.pagination ?? getDefaultPaginationState()\n      )\n    }\n    table.setPageIndex = updater => {\n      table.setPagination(old => {\n        let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n        const maxPageIndex =\n          typeof table.options.pageCount === 'undefined' ||\n          table.options.pageCount === -1\n            ? Number.MAX_SAFE_INTEGER\n            : table.options.pageCount - 1\n\n        pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n        return {\n          ...old,\n          pageIndex,\n        }\n      })\n    }\n    table.resetPageIndex = defaultState => {\n      table.setPageIndex(\n        defaultState\n          ? defaultPageIndex\n          : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n      )\n    }\n    table.resetPageSize = defaultState => {\n      table.setPageSize(\n        defaultState\n          ? defaultPageSize\n          : table.initialState?.pagination?.pageSize ?? defaultPageSize\n      )\n    }\n    table.setPageSize = updater => {\n      table.setPagination(old => {\n        const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n        const topRowIndex = old.pageSize * old.pageIndex!\n        const pageIndex = Math.floor(topRowIndex / pageSize)\n\n        return {\n          ...old,\n          pageIndex,\n          pageSize,\n        }\n      })\n    }\n    table.setPageCount = updater =>\n      table.setPagination(old => {\n        let newPageCount = functionalUpdate(\n          updater,\n          table.options.pageCount ?? -1\n        )\n\n        if (typeof newPageCount === 'number') {\n          newPageCount = Math.max(-1, newPageCount)\n        }\n\n        return {\n          ...old,\n          pageCount: newPageCount,\n        }\n      })\n\n    table.getPageOptions = memo(\n      () => [table.getPageCount()],\n      pageCount => {\n        let pageOptions: number[] = []\n        if (pageCount && pageCount > 0) {\n          pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n        }\n        return pageOptions\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n\n    table.getCanPreviousPage = () => table.getState().pagination.pageIndex > 0\n\n    table.getCanNextPage = () => {\n      const { pageIndex } = table.getState().pagination\n\n      const pageCount = table.getPageCount()\n\n      if (pageCount === -1) {\n        return true\n      }\n\n      if (pageCount === 0) {\n        return false\n      }\n\n      return pageIndex < pageCount - 1\n    }\n\n    table.previousPage = () => {\n      return table.setPageIndex(old => old - 1)\n    }\n\n    table.nextPage = () => {\n      return table.setPageIndex(old => {\n        return old + 1\n      })\n    }\n\n    table.getPrePaginationRowModel = () => table.getExpandedRowModel()\n    table.getPaginationRowModel = () => {\n      if (\n        !table._getPaginationRowModel &&\n        table.options.getPaginationRowModel\n      ) {\n        table._getPaginationRowModel =\n          table.options.getPaginationRowModel(table)\n      }\n\n      if (table.options.manualPagination || !table._getPaginationRowModel) {\n        return table.getPrePaginationRowModel()\n      }\n\n      return table._getPaginationRowModel()\n    }\n\n    table.getPageCount = () => {\n      return (\n        table.options.pageCount ??\n        Math.ceil(\n          table.getPrePaginationRowModel().rows.length /\n            table.getState().pagination.pageSize\n        )\n      )\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.pin = position => {\n      const columnIds = column\n        .getLeafColumns()\n        .map(d => d.id)\n        .filter(Boolean) as string[]\n\n      table.setColumnPinning(old => {\n        if (position === 'right') {\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: [\n              ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n          }\n        }\n\n        if (position === 'left') {\n          return {\n            left: [\n              ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        }\n\n        return {\n          left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n          right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n        }\n      })\n    }\n\n    column.getCanPin = () => {\n      const leafColumns = column.getLeafColumns()\n\n      return leafColumns.some(\n        d =>\n          (d.columnDef.enablePinning ?? true) &&\n          (table.options.enablePinning ?? true)\n      )\n    }\n\n    column.getIsPinned = () => {\n      const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n      const { left, right } = table.getState().columnPinning\n\n      const isLeft = leafColumnIds.some(d => left?.includes(d))\n      const isRight = leafColumnIds.some(d => right?.includes(d))\n\n      return isLeft ? 'left' : isRight ? 'right' : false\n    }\n\n    column.getPinnedIndex = () => {\n      const position = column.getIsPinned()\n\n      return position\n        ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n        : 0\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.getCenterVisibleCells = memo(\n      () => [\n        row._getAllVisibleCells(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allCells, left, right) => {\n        const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n        return allCells.filter(d => !leftAndRight.includes(d.column.id))\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getCenterVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n    row.getLeftVisibleCells = memo(\n      () => [row._getAllVisibleCells(), table.getState().columnPinning.left, ,],\n      (allCells, left) => {\n        const cells = (left ?? [])\n          .map(columnId => allCells.find(cell => cell.column.id === columnId)!)\n          .filter(Boolean)\n          .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n        return cells\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n    row.getRightVisibleCells = memo(\n      () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n      (allCells, right) => {\n        const cells = (right ?? [])\n          .map(columnId => allCells.find(cell => cell.column.id === columnId)!)\n          .filter(Boolean)\n          .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n        return cells\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnPinning = updater =>\n      table.options.onColumnPinningChange?.(updater)\n\n    table.resetColumnPinning = defaultState =>\n      table.setColumnPinning(\n        defaultState\n          ? getDefaultPinningState()\n          : table.initialState?.columnPinning ?? getDefaultPinningState()\n      )\n\n    table.getIsSomeColumnsPinned = position => {\n      const pinningState = table.getState().columnPinning\n\n      if (!position) {\n        return Boolean(pinningState.left?.length || pinningState.right?.length)\n      }\n      return Boolean(pinningState[position]?.length)\n    }\n\n    table.getLeftLeafColumns = memo(\n      () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n      (allColumns, left) => {\n        return (left ?? [])\n          .map(columnId => allColumns.find(column => column.id === columnId)!)\n          .filter(Boolean)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    )\n\n    table.getRightLeafColumns = memo(\n      () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n      (allColumns, right) => {\n        return (right ?? [])\n          .map(columnId => allColumns.find(column => column.id === columnId)!)\n          .filter(Boolean)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    )\n\n    table.getCenterLeafColumns = memo(\n      () => [\n        table.getAllLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, left, right) => {\n        const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n        return allColumns.filter(d => !leftAndRight.includes(d.id))\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    )\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setRowSelection = updater =>\n      table.options.onRowSelectionChange?.(updater)\n    table.resetRowSelection = defaultState =>\n      table.setRowSelection(\n        defaultState ? {} : table.initialState.rowSelection ?? {}\n      )\n    table.toggleAllRowsSelected = value => {\n      table.setRowSelection(old => {\n        value =\n          typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n        const rowSelection = { ...old }\n\n        const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n        // We don't use `mutateRowIsSelected` here for performance reasons.\n        // All of the rows are flat already, so it wouldn't be worth it\n        if (value) {\n          preGroupedFlatRows.forEach(row => {\n            if (!row.getCanSelect()) {\n              return\n            }\n            rowSelection[row.id] = true\n          })\n        } else {\n          preGroupedFlatRows.forEach(row => {\n            delete rowSelection[row.id]\n          })\n        }\n\n        return rowSelection\n      })\n    }\n    table.toggleAllPageRowsSelected = value =>\n      table.setRowSelection(old => {\n        const resolvedValue =\n          typeof value !== 'undefined'\n            ? value\n            : !table.getIsAllPageRowsSelected()\n\n        const rowSelection: RowSelectionState = { ...old }\n\n        table.getRowModel().rows.forEach(row => {\n          mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n        })\n\n        return rowSelection\n      })\n\n    // addRowSelectionRange: rowId => {\n    //   const {\n    //     rows,\n    //     rowsById,\n    //     options: { selectGroupingRows, selectSubRows },\n    //   } = table\n\n    //   const findSelectedRow = (rows: Row[]) => {\n    //     let found\n    //     rows.find(d => {\n    //       if (d.getIsSelected()) {\n    //         found = d\n    //         return true\n    //       }\n    //       const subFound = findSelectedRow(d.subRows || [])\n    //       if (subFound) {\n    //         found = subFound\n    //         return true\n    //       }\n    //       return false\n    //     })\n    //     return found\n    //   }\n\n    //   const firstRow = findSelectedRow(rows) || rows[0]\n    //   const lastRow = rowsById[rowId]\n\n    //   let include = false\n    //   const selectedRowIds = {}\n\n    //   const addRow = (row: Row) => {\n    //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n    //       rowsById,\n    //       selectGroupingRows: selectGroupingRows!,\n    //       selectSubRows: selectSubRows!,\n    //     })\n    //   }\n\n    //   table.rows.forEach(row => {\n    //     const isFirstRow = row.id === firstRow.id\n    //     const isLastRow = row.id === lastRow.id\n\n    //     if (isFirstRow || isLastRow) {\n    //       if (!include) {\n    //         include = true\n    //       } else if (include) {\n    //         addRow(row)\n    //         include = false\n    //       }\n    //     }\n\n    //     if (include) {\n    //       addRow(row)\n    //     }\n    //   })\n\n    //   table.setRowSelection(selectedRowIds)\n    // },\n    table.getPreSelectedRowModel = () => table.getCoreRowModel()\n    table.getSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getCoreRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n\n    table.getFilteredSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getFilteredRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' &&\n          'getFilteredSelectedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n\n    table.getGroupedSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getSortedRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'getGroupedSelectedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n\n    ///\n\n    // getGroupingRowCanSelect: rowId => {\n    //   const row = table.getRow(rowId)\n\n    //   if (!row) {\n    //     throw new Error()\n    //   }\n\n    //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n    //     return table.options.enableGroupingRowSelection(row)\n    //   }\n\n    //   return table.options.enableGroupingRowSelection ?? false\n    // },\n\n    table.getIsAllRowsSelected = () => {\n      const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n      const { rowSelection } = table.getState()\n\n      let isAllRowsSelected = Boolean(\n        preGroupedFlatRows.length && Object.keys(rowSelection).length\n      )\n\n      if (isAllRowsSelected) {\n        if (\n          preGroupedFlatRows.some(\n            row => row.getCanSelect() && !rowSelection[row.id]\n          )\n        ) {\n          isAllRowsSelected = false\n        }\n      }\n\n      return isAllRowsSelected\n    }\n\n    table.getIsAllPageRowsSelected = () => {\n      const paginationFlatRows = table\n        .getPaginationRowModel()\n        .flatRows.filter(row => row.getCanSelect())\n      const { rowSelection } = table.getState()\n\n      let isAllPageRowsSelected = !!paginationFlatRows.length\n\n      if (\n        isAllPageRowsSelected &&\n        paginationFlatRows.some(row => !rowSelection[row.id])\n      ) {\n        isAllPageRowsSelected = false\n      }\n\n      return isAllPageRowsSelected\n    }\n\n    table.getIsSomeRowsSelected = () => {\n      const totalSelected = Object.keys(\n        table.getState().rowSelection ?? {}\n      ).length\n      return (\n        totalSelected > 0 &&\n        totalSelected < table.getFilteredRowModel().flatRows.length\n      )\n    }\n\n    table.getIsSomePageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows\n      return table.getIsAllPageRowsSelected()\n        ? false\n        : paginationFlatRows\n            .filter(row => row.getCanSelect())\n            .some(d => d.getIsSelected() || d.getIsSomeSelected())\n    }\n\n    table.getToggleAllRowsSelectedHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllRowsSelected(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n\n    table.getToggleAllPageRowsSelectedHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllPageRowsSelected(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.toggleSelected = value => {\n      const isSelected = row.getIsSelected()\n\n      table.setRowSelection(old => {\n        value = typeof value !== 'undefined' ? value : !isSelected\n\n        if (isSelected === value) {\n          return old\n        }\n\n        const selectedRowIds = { ...old }\n\n        mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n        return selectedRowIds\n      })\n    }\n    row.getIsSelected = () => {\n      const { rowSelection } = table.getState()\n      return isRowSelected(row, rowSelection)\n    }\n\n    row.getIsSomeSelected = () => {\n      const { rowSelection } = table.getState()\n      return isSubRowSelected(row, rowSelection, table) === 'some'\n    }\n\n    row.getIsAllSubRowsSelected = () => {\n      const { rowSelection } = table.getState()\n      return isSubRowSelected(row, rowSelection, table) === 'all'\n    }\n\n    row.getCanSelect = () => {\n      if (typeof table.options.enableRowSelection === 'function') {\n        return table.options.enableRowSelection(row)\n      }\n\n      return table.options.enableRowSelection ?? true\n    }\n\n    row.getCanSelectSubRows = () => {\n      if (typeof table.options.enableSubRowSelection === 'function') {\n        return table.options.enableSubRowSelection(row)\n      }\n\n      return table.options.enableSubRowSelection ?? true\n    }\n\n    row.getCanMultiSelect = () => {\n      if (typeof table.options.enableMultiRowSelection === 'function') {\n        return table.options.enableMultiRowSelection(row)\n      }\n\n      return table.options.enableMultiRowSelection ?? true\n    }\n    row.getToggleSelectedHandler = () => {\n      const canSelect = row.getCanSelect()\n\n      return (e: unknown) => {\n        if (!canSelect) return\n        row.toggleSelected(\n          ((e as MouseEvent).target as HTMLInputElement)?.checked\n        )\n      }\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n      sortUndefined: 1,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.getAutoSortingFn = () => {\n      const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n      let isString = false\n\n      for (const row of firstRows) {\n        const value = row?.getValue(column.id)\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return sortingFns.datetime\n        }\n\n        if (typeof value === 'string') {\n          isString = true\n\n          if (value.split(reSplitAlphaNumeric).length > 1) {\n            return sortingFns.alphanumeric\n          }\n        }\n      }\n\n      if (isString) {\n        return sortingFns.text\n      }\n\n      return sortingFns.basic\n    }\n    column.getAutoSortDir = () => {\n      const firstRow = table.getFilteredRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'string') {\n        return 'asc'\n      }\n\n      return 'desc'\n    }\n    column.getSortingFn = () => {\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.columnDef.sortingFn)\n        ? column.columnDef.sortingFn\n        : column.columnDef.sortingFn === 'auto'\n        ? column.getAutoSortingFn()\n        : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n          sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n    }\n    column.toggleSorting = (desc, multi) => {\n      // if (column.columns.length) {\n      //   column.columns.forEach((c, i) => {\n      //     if (c.id) {\n      //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n      //     }\n      //   })\n      //   return\n      // }\n\n      // this needs to be outside of table.setSorting to be in sync with rerender\n      const nextSortingOrder = column.getNextSortingOrder()\n      const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n      table.setSorting(old => {\n        // Find any existing sorting for this column\n        const existingSorting = old?.find(d => d.id === column.id)\n        const existingIndex = old?.findIndex(d => d.id === column.id)\n\n        let newSorting: SortingState = []\n\n        // What should we do with this sort action?\n        let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n        let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n        // Multi-mode\n        if (old?.length && column.getCanMultiSort() && multi) {\n          if (existingSorting) {\n            sortAction = 'toggle'\n          } else {\n            sortAction = 'add'\n          }\n        } else {\n          // Normal mode\n          if (old?.length && existingIndex !== old.length - 1) {\n            sortAction = 'replace'\n          } else if (existingSorting) {\n            sortAction = 'toggle'\n          } else {\n            sortAction = 'replace'\n          }\n        }\n\n        // Handle toggle states that will remove the sorting\n        if (sortAction === 'toggle') {\n          // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n          if (!hasManualValue) {\n            // Is our intention to remove?\n            if (!nextSortingOrder) {\n              sortAction = 'remove'\n            }\n          }\n        }\n\n        if (sortAction === 'add') {\n          newSorting = [\n            ...old,\n            {\n              id: column.id,\n              desc: nextDesc,\n            },\n          ]\n          // Take latest n columns\n          newSorting.splice(\n            0,\n            newSorting.length -\n              (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n          )\n        } else if (sortAction === 'toggle') {\n          // This flips (or sets) the\n          newSorting = old.map(d => {\n            if (d.id === column.id) {\n              return {\n                ...d,\n                desc: nextDesc,\n              }\n            }\n            return d\n          })\n        } else if (sortAction === 'remove') {\n          newSorting = old.filter(d => d.id !== column.id)\n        } else {\n          newSorting = [\n            {\n              id: column.id,\n              desc: nextDesc,\n            },\n          ]\n        }\n\n        return newSorting\n      })\n    }\n\n    column.getFirstSortDir = () => {\n      const sortDescFirst =\n        column.columnDef.sortDescFirst ??\n        table.options.sortDescFirst ??\n        column.getAutoSortDir() === 'desc'\n      return sortDescFirst ? 'desc' : 'asc'\n    }\n\n    column.getNextSortingOrder = (multi?: boolean) => {\n      const firstSortDirection = column.getFirstSortDir()\n      const isSorted = column.getIsSorted()\n\n      if (!isSorted) {\n        return firstSortDirection\n      }\n\n      if (\n        isSorted !== firstSortDirection &&\n        (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n        (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n      ) {\n        return false\n      }\n      return isSorted === 'desc' ? 'asc' : 'desc'\n    }\n\n    column.getCanSort = () => {\n      return (\n        (column.columnDef.enableSorting ?? true) &&\n        (table.options.enableSorting ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getCanMultiSort = () => {\n      return (\n        column.columnDef.enableMultiSort ??\n        table.options.enableMultiSort ??\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsSorted = () => {\n      const columnSort = table.getState().sorting?.find(d => d.id === column.id)\n\n      return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n    }\n\n    column.getSortIndex = () =>\n      table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1\n\n    column.clearSorting = () => {\n      //clear sorting for just 1 column\n      table.setSorting(old =>\n        old?.length ? old.filter(d => d.id !== column.id) : []\n      )\n    }\n\n    column.getToggleSortingHandler = () => {\n      const canSort = column.getCanSort()\n\n      return (e: unknown) => {\n        if (!canSort) return\n        ;(e as any).persist?.()\n        column.toggleSorting?.(\n          undefined,\n          column.getCanMultiSort() ? table.options.isMultiSortEvent?.(e) : false\n        )\n      }\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setSorting = updater => table.options.onSortingChange?.(updater)\n    table.resetSorting = defaultState => {\n      table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n    }\n    table.getPreSortedRowModel = () => table.getGroupedRowModel()\n    table.getSortedRowModel = () => {\n      if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n        table._getSortedRowModel = table.options.getSortedRowModel(table)\n      }\n\n      if (table.options.manualSorting || !table._getSortedRowModel) {\n        return table.getPreSortedRowModel()\n      }\n\n      return table._getSortedRowModel()\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.toggleVisibility = value => {\n      if (column.getCanHide()) {\n        table.setColumnVisibility(old => ({\n          ...old,\n          [column.id]: value ?? !column.getIsVisible(),\n        }))\n      }\n    }\n    column.getIsVisible = () => {\n      return table.getState().columnVisibility?.[column.id] ?? true\n    }\n\n    column.getCanHide = () => {\n      return (\n        (column.columnDef.enableHiding ?? true) &&\n        (table.options.enableHiding ?? true)\n      )\n    }\n    column.getToggleVisibilityHandler = () => {\n      return (e: unknown) => {\n        column.toggleVisibility?.(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row._getAllVisibleCells = memo(\n      () => [row.getAllCells(), table.getState().columnVisibility],\n      cells => {\n        return cells.filter(cell => cell.column.getIsVisible())\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n    row.getVisibleCells = memo(\n      () => [\n        row.getLeftVisibleCells(),\n        row.getCenterVisibleCells(),\n        row.getRightVisibleCells(),\n      ],\n      (left, center, right) => [...left, ...center, ...right],\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    table.getVisibleFlatColumns = makeVisibleColumnsMethod(\n      'getVisibleFlatColumns',\n      () => table.getAllFlatColumns()\n    )\n    table.getVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getVisibleLeafColumns',\n      () => table.getAllLeafColumns()\n    )\n    table.getLeftVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getLeftVisibleLeafColumns',\n      () => table.getLeftLeafColumns()\n    )\n    table.getRightVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getRightVisibleLeafColumns',\n      () => table.getRightLeafColumns()\n    )\n    table.getCenterVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getCenterVisibleLeafColumns',\n      () => table.getCenterLeafColumns()\n    )\n\n    table.setColumnVisibility = updater =>\n      table.options.onColumnVisibilityChange?.(updater)\n\n    table.resetColumnVisibility = defaultState => {\n      table.setColumnVisibility(\n        defaultState ? {} : table.initialState.columnVisibility ?? {}\n      )\n    }\n\n    table.toggleAllColumnsVisible = value => {\n      value = value ?? !table.getIsAllColumnsVisible()\n\n      table.setColumnVisibility(\n        table.getAllLeafColumns().reduce(\n          (obj, column) => ({\n            ...obj,\n            [column.id]: !value ? !column.getCanHide?.() : value,\n          }),\n          {}\n        )\n      )\n    }\n\n    table.getIsAllColumnsVisible = () =>\n      !table.getAllLeafColumns().some(column => !column.getIsVisible?.())\n\n    table.getIsSomeColumnsVisible = () =>\n      table.getAllLeafColumns().some(column => column.getIsVisible?.())\n\n    table.getToggleAllColumnsVisibilityHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllColumnsVisible(\n          ((e as MouseEvent).target as HTMLInputElement)?.checked\n        )\n      }\n    }\n  },\n}\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  for (let index = 0; index < table._features.length; index++) {\n    const feature = table._features[index]\n    feature?.createTable?.(table)\n  }\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    feature.createCell?.(\n      cell as Cell<TData, TValue>,\n      column,\n      row as Row<TData>,\n      table\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    feature?.createRow?.(row, table)\n  }\n\n  return row as Row<TData>\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              let sortInt = 0\n\n              // All sorting ints should always return in ascending order\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = aValue === undefined\n                const bUndefined = bValue === undefined\n\n                if (aUndefined || bUndefined) {\n                  sortInt =\n                    aUndefined && bUndefined\n                      ? 0\n                      : aUndefined\n                      ? columnInfo.sortUndefined\n                      : -columnInfo.sortUndefined\n                }\n              }\n\n              if (sortInt === 0) {\n                sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n              }\n\n              // If sorting is non-zero, take care of desc and inversion\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","isNumberArray","Array","isArray","every","val","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","replace","undefined","header","accessorFn","includes","originalRow","split","_result","warn","Error","column","columns","getFlatColumns","_column$columns","flatMap","process","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","feature","_features","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","orderedLeafColumns","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","reduce","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","_queue","autoResetAll","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getPrePaginationRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","Object","values","keys","getRowModel","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","search","toLowerCase","getValue","toString","autoRemove","testFalsey","includesStringSensitive","_row$getValue2","equalsString","_row$getValue3","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","_old$filter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","getAllLeafColumns","updateFn","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","mid","floor","nums","sort","a","b","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","props","_toString","_props$getValue","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","getGroupingValue","_groupingValuesCache","hasOwnProperty","original","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","resetPageSize","_table$initialState$p3","_table$initialState2","setPageSize","topRowIndex","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sortingFns","Sorting","sorting","sortingFn","sortUndefined","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","_table$options$maxMul","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","obj","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","_options$initialState","defaultOptions","assign","mergeOptions","coreInitialState","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","_defaultColumn","_props$renderValue$to","_props$renderValue","renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","getRenderValue","_cell$getValue","renderFallbackValue","rowIndex","parentId","_valuesCache","_uniqueValuesCache","getUniqueValues","getLeafRows","getParentRow","getParentRows","parentRows","currentRow","parentRow","createColumnHelper","accessor","display","group","data","accessRows","originalRows","getSubRows","_row$originalSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","_table$options$maxLea","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","_table$options$maxLea2","pass","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","filterableIds","globallyFilterableColumns","_globalFilterFn$resol","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","_table$getColumn","facetedRowModel","facetedUniqueValues","has","_facetedUniqueValues$","set","get","_facetedRowModel$flat","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","sortInt","aValue","bValue","aUndefined","bUndefined","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd","paginatedRowModel"],"mappings":"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"}